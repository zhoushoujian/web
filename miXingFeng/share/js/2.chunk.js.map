{"version":3,"file":"js/2.chunk.js?b081a96a","sources":["webpack:///src/constants/httpRoute.js","webpack:///src/logic/myInfo/index.js","webpack:///src/logic/login/index.js","webpack:///src/services/indexDBRecentMusic.js","webpack:///src/logic/common/index.js","webpack:///src/services/indexDB.js","webpack:///src/services/indexDBMusic.js","webpack:///src/constants/enumeration.js","webpack:///src/services/utils.js"],"sourcesContent":["const hostname = window.config.debug ? (window.config.domain + \":\" + window.config.port) : window.config.domainUrl;\nexport const HTTP_URL = {\n\t\"resetPassword\": `${hostname}/reset_password`,\n\t\"loginVerify\": `${hostname}/login_verify`,\n\t\"registerVerify\": `${hostname}/register_verify`,\n\t\"lastSign\": `${hostname}/last_sign`,\n\t\"goSign\": `${hostname}/go_sign`,\n\t\"retrieveOthers\": `${hostname}/retrieve_others`,\n\t\"appRelease\": `${hostname}/apk/app_release.apk`,\n\t\"checkUpdate\": `${hostname}/check_update?appVersion={appVersion}&notCheckOutOfDateVersion={notCheckOutOfDateVersion}`,\n\t\"tokenLogin\": `${hostname}/token_login`,\n\t\"searchRecord\": `${hostname}/search_user_profile\\?username={username}&slice={slice}`,\n\t\"checkLog\": hostname + \"/check_log\",\n\t\"updateUserInfo\": hostname + '/update_user_info',\n\t\"feedback\": hostname + '/feedback',\n\t\"getList\": hostname + \"/get_list/?fileType={fileType}\",\n\t\"uploadFile\": hostname + \"/Images\",\n\t\"getLicence\": hostname + \"/get_licence\",\n\t\"getPrivacy\": hostname + \"/get_privacy\",\n\t\"getServiceList\": hostname + \"/get_service_list\",\n\t\"getUserAgreement\": hostname + \"/get_user_agreement\",\n\t\"getAdsConfig\": hostname + \"/get_ads_config\",\n\t\"heartBeat\": hostname + \"/heart_beat\",\n\t\"uploadPic\": hostname + \"/upload_pic\",\n\t\"signRecordTypeahead\": hostname + \"/sign_record_typeahead?query={query}\",\n\t\"getOnlinePersons\": hostname + \"/get_online_persons\",\n\t\"replaceSocketLink\": hostname + \"/replace_socket_link\",\n\t\"searchPosition\": hostname + \"/search_position\\?username={username}&positiveUsername={positiveUsername}\",\n\t\"rpcCall\": hostname + \"/rpc_call\",\n\t\"uploadDeviceInfo\": hostname + \"/device_info\",\n\t\"getLoginRecord\": hostname + \"/get_login_record?username={username}&token={token}\",\n\t\"thirdLogin\": hostname + \"/mini_program_login?code={code}&env={env}&fromApp={fromApp}\",\n\t\"uploadRegistrationID\": hostname + \"/upload_registration_id\",\n\t\"saveSong\": hostname + \"/save_song\",\n\t\"delFile\": hostname + \"/del_file\",\n\t\"checkFileMD5\": hostname + \"/check_file_md5\",\n\t\"checkEmailValid\": hostname + \"/check_email_valid?value={value}&username={username}&email={email}&mobile={mobile}\",\n\t\"checkMobileValid\": hostname + \"/check_mobile_valid?value={value}&username={username}&mobile={mobile}&registerFromLogin={registerFromLogin}\",\n\t\"forgetPassword\": hostname + \"/forget_password\",\n\t\"getNetEaseCloudMusicLists\": hostname + \"/get_net_ease_cloud_music_lists?query={query}\",\n\t\"getQQMusicLists\": hostname + \"/get_qq_music_lists?query={query}\",\n\t\"getKuGouMusicLists\": hostname + \"/get_ku_gou_music_lists?query={query}\",\n\t\"getKuWoMusicLists\": hostname + \"/get_ku_wo_music_lists?query={query}\",\n\t\"getOnlineMusicLists\": hostname + \"/get_online_music_lists?query={query}\",\n\t\"getNetEaseCloudMusicLinksByIds\": hostname + \"/get_net_ease_cloud_music_links__by_ids\",\n\t\"getQQMusicLinksByIds\": hostname + \"/get_qq_music_links_by_ids\",\n\t\"getKuGouMusicLinksByIds\": hostname + \"/get_ku_gou_music_links_by_ids\",\n\t\"getKuWoMusicLinksByIds\": hostname + \"/get_ku_wo_music_links_by_ids\",\n\t\"getAdPicture\": hostname + \"/get_ad_picture\",\n\t\"getNetEaseCloudMvLink\": hostname + \"/get_net_ease_cloud_mv_link?id={id}&userId={userId}\",\n\t\"getQQMvLink\": hostname + \"/get_qq_mv_link?id={id}&userId={userId}\",\n\t\"userActivity\": hostname + \"/user_activity\",\n\t\"jiGuangVerify\": hostname + \"/ji_guang_verify\",\n\t\"getPositionFromH5\": hostname + \"/get_position_from_h5?location={location}\",\n}\n","import { HTTP_URL } from \"../../constants/httpRoute\";\nimport { networkErr, saveFileToLocal, checkFileWritePriority, requestFileWritePriority } from \"../../services/utils\";\nimport { updateSetSex, updateSetBirthday, updateSetHeadPic, updateSetAddress, updateSetHeadPicName, updateReplaceHeadPic } from \"../../ducks/myInfo\";\nimport { Toast  } from 'antd-mobile';\nimport { CONSTANT } from \"../../constants/enumeration\";\nimport { updateToken } from \"../../ducks/login\"\n\nexport const saveUserInfoFunc = (name, info, self) => {\n\tconst {username, token} = window.$getState().login;\n\tconst {setMobile} = window.$getState().myInfo;\n    if(!token) {\n        return Toast.fail('请先登录', CONSTANT.toastTime);\n    }\n    if(name === 'sex'){\n        info = info.join();\n    } else if(name === 'birthday'){\n        info = info.format(\"yyyy-MM-dd\");\n    } else if(name === \"address\"){\n        info = info[2];\n    }\n\tconst data = Object.assign({}, {username: username || setMobile, token, userInfo: { [name]: info } })\n\tif(!self.startToSubmit){\n\t\tself.startToSubmit = true\n\t\taxios.post(HTTP_URL.updateUserInfo, data)\n        \t.then((response) => {\n\t\t\t\tself.startToSubmit = false\n        \t    if(response.data.result.response === \"modify_success\"){\n        \t        Toast.success('保存成功', CONSTANT.toastTime);\n        \t        if(name === 'sex'){\n        \t            window.$dispatch(updateSetSex(info));\n        \t        } else if(name === 'birthday'){\n        \t            window.$dispatch(updateSetBirthday(info));\n        \t        } else if(name === 'address'){\n        \t            window.$dispatch(updateSetAddress(info));\n        \t        }\n        \t    } else {\n        \t        Toast.fail('设置失败', CONSTANT.toastTime);\n        \t    }\n        \t})\n        \t.catch(err => {\n\t\t\t\tself.startToSubmit = false\n\t\t\t\treturn networkErr(err, `saveUserInfoFunc updateUserInfo data: ${JSON.stringify(data)}`);\n        \t})\n\t}\n}\n\nexport const getPhotoFunc = (index) => {\n\tif(window.isCordova){\n\t\tnavigator.camera.getPicture(\n\t\t\tonPhotoURISuccess,\n\t\t\tfunction(error){logger.error(\"取消了上传头像\", error)},\n\t\t\t{\n\t\t\t\tquality: 60,\n\t\t\t\tdestinationType: navigator.camera.DestinationType.NATIVE_URI,\n\t\t\t\tsourceType: index ? navigator.camera.PictureSourceType.SAVEDPHOTOALBUM : navigator.camera.PictureSourceType.CAMERA,\n\t\t\t\tallowEdit:true,\n\t\t\t\tencodingType:Camera.EncodingType.JPEG,\n\t\t\t\ttargetWidth:800,\n\t\t\t\ttargetHeight:600,\n\t\t\t\tsaveToPhotoAlbum: true\n\t\t\t}\n\t\t);\n\t}\n}\n\nconst onPhotoURISuccess = (imageURI) => {\n\tconst { username } = $getState().login;\n\tconst { setMobile } = $getState().myInfo;\n    logger.info('onPhotoURISuccess', imageURI);\n    let options = new FileUploadOptions();\n    options.chunkedMode = false;\n    options.fileKey = \"file\";\n    options.fileName = username || setMobile;\n    options.mimeType = \"image/jpeg\";\n    options.httpMethod = \"POST\";\n    let fileTransfer = new FileTransfer();\n    let successCallback = function (r) {\n        logger.info(\"onPhotoURISuccess.response\", JSON.parse(r.response));\n        const result = JSON.parse(r.response).result\n        if(result.response === \"more_than_10mb\"){\n            return Toast.fail('图片大小不得超过10MB', CONSTANT.toastTime);\n        } else if(result.response === \"illegal_filename\"){\n            return Toast.fail('文件名不得含有%或#', CONSTANT.toastTime);\n        } else if(result.response === \"illegal_filetype\"){\n            return Toast.fail('图片不得上传非jpeg或png以外的格式', CONSTANT.toastTime);\n        }\n\t\t$dispatch(updateSetHeadPic(result.newFilePath));\n\t\t$dispatch(updateReplaceHeadPic(true));\n\t\t$dispatch(updateToken(result.token));\n\t\tsaveHeadPicToLocal(result.newFilePath, username || setMobile, 'onPhotoURISuccess');\n        Toast.success('上传成功', CONSTANT.toastTime);\n    }\n    let errorCallback = function (error) {\n\t\tToast.fail(\"上传失败\", CONSTANT.toastTime)\n        logger.error(\"An error has occurred: Code = \" + error.code);\n        logger.error(\"upload error source \" + error.source);\n        logger.error(\"upload error target \" + error.target);\n    }\n    fileTransfer.upload(\n        imageURI, //本地文件路径\n        encodeURI(HTTP_URL.uploadPic), //服务器上传的路径\n        successCallback, //成功的回调\n        errorCallback, //失败的回调\n        options //配置项\n    );\n}\n\nexport const searchShellCommand = (self, command) => {\n\tconst { username, token } = $getState().login;\n\tconst { setRole, setMobile } = $getState().myInfo;\n\tif(!token) return window.goRoute(null, \"/login\")\n\tif(!command) return;\n\tconst data = Object.assign({ username: username||setMobile, token, command, role: setRole })\n\tlogger.info('searchShellCommand data', data)\n\tself.setState({\n\t\tisSearching: true\n\t})\n    return axios.post(HTTP_URL.rpcCall, data)\n        .then((response) => {\n\t\t\tswitch (response.data.result.response){\n\t\t\t\tcase \"no_username_or_token\":\n\t\t\t\t\talert(\"请先登录\")\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"no_command\":\n\t\t\t\t\talert(\"请输入命令\")\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"403_forbidden\":\n\t\t\t\t\talert(\"只能输入指定的命令\");\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tself.setState({\n\t\t\t\t\t\tshellResponse: response.data.result.response,\n\t\t\t\t\t\tisSearching: false\n\t\t\t\t\t})\n\t\t\t}\n        })\n        .catch(err => {\n\t\t\tself.setState({\n\t\t\t\tisSearching: true\n\t\t\t})\n\t\t\tlogger.error('err', err)\n            return networkErr(err, `rpcCall data: ${data}`);\n\t\t})\n\t\t.finally(() => {\n\t\t\tself.setState({\n\t\t\t\tisSearching: false\n\t\t\t})\n\t\t})\n}\n\nexport const showHeadPic = (setHeadPic, headPicAddress, setHeadPicName) => {\n\tif(setHeadPic){\n\t\tif(/^http/.test(setHeadPic)){\n\t\t\tlogger.warn(\"/^http/.test(setHeadPic) userProfile\", true)\n\t\t\theadPicAddress = setHeadPic\n\t\t} else {\n\t\t\tif(window.isCordova){\n\t\t\t\tdevice.platform === \"Android\"\n\t\t\t\t?\theadPicAddress = \"/storage/emulated/0/miXingFeng/avatar/\" + setHeadPicName\n\t\t\t\t: \theadPicAddress = window.serverHost + \"/\" + setHeadPic\n\t\t\t} else {\n\t\t\t\theadPicAddress = window.serverHost + \"/\" + setHeadPic\n\t\t\t}\n\t\t}\n\t}\n\treturn headPicAddress;\n}\n\nexport const saveHeadPicToLocal = (headPicAddress, username, logInfo=\"\") => {\n\tconst extname = headPicAddress.split(\".\")[headPicAddress.split(\".\").length - 1];\n\tconst setHeadPicName = `${username}.${extname}`;\n\tlogger.info(`${logInfo} setHeadPicName`, setHeadPicName)\n\twindow.$dispatch(updateSetHeadPicName(setHeadPicName));\n\tlet headPicAddressFull = window.serverHost + \"/\" + headPicAddress\n\treturn checkFileWritePriority()\n\t\t.then(bool => {\n\t\t\tif(bool){\n\t\t\t\tsaveFileToLocal({\n\t\t\t\t\tfilenameOrigin: setHeadPicName,\n\t\t\t\t\tfileUrl: headPicAddressFull,\n\t\t\t\t\tfolder: 'avatar'\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treturn alertDialog(\"请授予文件读写权限，否则不能下载头像\", \"\", \"知道了\", requestFileWritePriority)\n\t\t\t}\n\t\t})\n}\n","import axios from 'axios';\nimport { Toast } from \"antd-mobile\";\nimport { HTTP_URL } from \"../../constants/httpRoute\";\nimport { replaceSocketLink } from \"../../services/utils\";\nimport { updatePassword,\n\tupdateUsername,\n\tupdateToken,\n\tupdateIsFromLoginPage,\n\tupdateLogOutFlag,\n\tupdateForgetPasswordToken,\n\tupdateForgetPasswordTokenOrigin,\n\tupdateUserId,\n\tupdateRetryLoginTimes\n} from \"../../ducks/login\";\nimport {\n\tnetworkErr, confirm\n} from \"../../services/utils\";\nimport {\n\tupdateSetNickname,\n\tupdateSetMobile,\n\tupdateSignature,\n\tupdateSetSex,\n\tupdateSetBirthday,\n\tupdateSetHeadPic,\n\tupdateSetAddress,\n\tupdateSetRole,\n\tupdateSetEmail,\n\tupdateCarrierOperator\n} from \"../../ducks/myInfo\";\nimport { CONSTANT } from \"../../constants/enumeration\";\nimport { logoutApp, checkPassword } from \"../common\";\nimport { updateDeviceInfo, updateAllowShareMyNickname } from \"../../ducks/common\";\nimport { saveHeadPicToLocal } from \"../myInfo\";\nimport { updateMusicCollection } from \"../../ducks/fileServer\";\n\nlet loginFlag = false\nexport const loginApp = (username, password, self) => {\n\tif(loginFlag) return;\n    if (!username) {\n        alert(\"用户名不能为空\");\n        return;\n    } else if (!password) {\n        alert(\"密码不能为空\");\n        return;\n\t}\n\tloginFlag = true;\n\tusername = username.trim()\n\tpassword = password.trim()\n\tlet { retryLoginTimes } = $getState().login\n\tlet continueToNext = true\n\tif(retryLoginTimes >= 7){\n\t\tcontinueToNext = false\n\t\tloginFlag = false\n\t\tif(retryLoginTimes === 7){\n\t\t\tsetTimeout(() => {\n\t\t\t\t$dispatch(updateRetryLoginTimes(0))\n\t\t\t}, 1000 * 60 * 5)\n\t\t}\n\t\treturn confirm(\"提示\", \"密码输入的错误次数过多，建议找回密码或稍后再试\", \"去找回\", () => {\n\t\t\treturn window.goRoute(self, \"/forget_password\")\n\t\t})\n\t}\n\tif(!continueToNext) return\n\tself.setState({\n\t\tloginStatus: \"登录中...\"\n\t})\n\tconst data = Object.assign({}, { username }, { pwd: password })\n    Toast.loading('加载中...', CONSTANT.toastLoadingTime, () => {});\n    axios.post(HTTP_URL.loginVerify ,(data))\n        .then(async (response) => {\n\t\t\tself.setState({\n\t\t\t\tloginStatus: \"登录\"\n\t\t\t})\n            if (response.data.result.response === \"error_username\" || response.data.result.response === \"error_password\") {\n\t\t\t\tToast.hide();\n\t\t\t\tretryLoginTimes++\n\t\t\t\tif(retryLoginTimes === 5){\n\t\t\t\t\talert(\"密码已输错5次，还有3次机会\")\n\t\t\t\t} else if(retryLoginTimes === 6){\n\t\t\t\t\talert(\"密码已输错6次，还有2次机会\")\n\t\t\t\t} else if(retryLoginTimes === 7){\n\t\t\t\t\talert(\"密码已输错7次，还有1次机会\")\n\t\t\t\t} else if(retryLoginTimes < 5){\n\t\t\t\t\talert(\"用户名或密码错误\");\n\t\t\t\t}\n\t\t\t\t$dispatch(updateRetryLoginTimes(retryLoginTimes))\n                return;\n            } else if (response.data.result.response === \"empty_username\") {\n                Toast.hide();\n                alert(\"用户名不能为空\");\n                return;\n            } else if(response.data.result.token){\n\t\t\t\t$dispatch(updateRetryLoginTimes(0))\n                const result = response.data.result;\n\t\t\t\t$dispatch(updateIsFromLoginPage(true));\n\t\t\t\tdealtWithLogin(result)\n\t\t\t\tToast.hide();\n            } else {\n\t\t\t\talertDebug(\"unknown error\")\n\t\t\t\tlogger.error(\"loginApp loginVerify response\", response.data)\n            }\n\t\t})\n        .catch(err => {\n            logger.error(`login  catch`, err);\n\t\t\tself.setState({\n\t\t\t\tloginStatus: \"登录\"\n\t\t\t})\n            Toast.hide();\n            networkErr(err, `loginVerify data: ${data}`);\n\t\t})\n\t\t.finally(() => {\n\t\t\tloginFlag = false;\n\t\t})\n}\n\nexport const dealtWithLogin = (result) => {\n\tconst userProfile = result.userProfile || {}\n\tconst favoriteSongs = result.favoriteSongs || []\n\tconst shareNickname = userProfile.shareNickname !== false ? true : false\n\tlocalStorage.setItem(\"userProfile\", JSON.stringify(userProfile))\n\tlocalStorage.setItem(\"favoriteSongs\", JSON.stringify(favoriteSongs.slice(0, 50)))\n\tlocalStorage.setItem(\"role\", result.role || \"\")\n\t$dispatch(updateUsername(result.username || \"\"));\n\t$dispatch(updatePassword(result.password));\n\t$dispatch(updateToken(result.token));\n\t$dispatch(updateSetNickname(userProfile.nickname));\n\t$dispatch(updateSetMobile(userProfile.mobile));\n\t$dispatch(updateSignature(userProfile.signature));\n\t$dispatch(updateSetSex(userProfile.sex));\n\t$dispatch(updateSetBirthday(userProfile.birthday));\n\t$dispatch(updateSetHeadPic(userProfile.user_pic));\n\t$dispatch(updateSetAddress(userProfile.address));\n\t$dispatch(updateAllowShareMyNickname(shareNickname));\n\t$dispatch(updateSetEmail(userProfile.email));\n\t$dispatch(updateCarrierOperator(userProfile.mobileCarrierOperator));\n\t$dispatch(updateMusicCollection(favoriteSongs));\n\tif($getState().login.logOutFlag) $dispatch(updateLogOutFlag(false));\n\t$dispatch(updateSetRole(result.role));\n\tif(userProfile.user_pic  && window.isCordova){\n\t\tsaveHeadPicToLocal(userProfile.user_pic, result.username, 'loginApp');\n\t}\n\twindow.eventEmit.$emit(\"hasLogin\")\n\n\tfavoriteSongs.forEach(item => {\n\t\tdelete item.getNewestPath\n\t})\n\n\tdocument.addEventListener('deviceready', function(){\n\t\twindow.$dispatch(updateDeviceInfo(device))\n\t\tlogger.info('device', device);\n\t\tif(!localStorage.getItem(\"device\")){\n\t\t\tconst info = { deviceInfo: device, token: result.token }\n\t\t\taxios.post(HTTP_URL.uploadDeviceInfo, info)\n\t\t\t\t.then((response) => {\n\t\t\t\t\tlocalStorage.setItem(\"device\", device || \"\")\n\t\t\t\t\tlogger.info('uploadDeviceInfo', response.data)\n\t\t\t\t})\n\t\t\t\t.catch(err => {\n\t\t\t\t\tlogger.error(\"loginApp uploadDeviceInfo\", err)\n\t\t\t\t})\n\t\t}\n\t},false);\n\n\tconst original = localStorage.getItem(\"oldUserId\") || \"\";\n\tconst newOne = (result.username || result.mobile)\n\t$dispatch(updateUserId(newOne))\n\tif(!result.autoLogin){\n\t\tconst data = { original, newOne }\n\t\tif(original !== newOne && original){\n\t\t\treplaceSocketLink(data, \"login success\")\n\t\t}\n\t}\n\tif(window.getRoute() !== \"/main/sign\"){\n\t\twindow.goRoute(null, \"/main/sign\");\n\t}\n}\n\nexport const registerUsername = (that, usernameValue=\"\", pwdValue=\"\", pwdValueAgain=\"\") => {\n\tusernameValue = usernameValue.replace(/\\s/g, \"\")\n\tpwdValue = pwdValue.replace(/\\s/g, \"\")\n\tpwdValueAgain = pwdValueAgain.replace(/\\s/g, \"\")\n    if (!usernameValue) {\n        alert(\"用户名不能为空\");\n        return;\n    } else if(!/^[\\u4e00-\\u9fa5_a-zA-Z0-9]+$/.test(usernameValue)){\n\t\tlogger.info(\"用户名只能由字母,数字或中文组成\", usernameValue)\n\t\treturn alertDialog(\"用户名只能由字母，数字或中文组成\");\n\t} else if(/^[0-9]/i.test(usernameValue)){\n\t\tlogger.info(\"用户名首字母不能是数字\", usernameValue)\n\t\treturn alertDialog(\"用户名首字母不能是数字\");\n\t} else if (usernameValue.length > 32) {\n        alertDialog(\"用户名长度不可超过32位\");\n        return;\n\t} else if (!pwdValue) {\n        alertDialog(\"密码不能为空\");\n        return;\n\t} else if (checkPassword(pwdValue) === false) { //密码至少包含一个数字和一个字母\n\t\tlogger.info(\"密码至少包含大小写字母和数字中的两种且长度在6-16位之间\", pwdValue)\n        alertDialog(\"密码至少包含大小写字母和数字中的两种且长度在6-16位之间\");\n        return;\n    } else if (pwdValue !== pwdValueAgain) {\n\t\tlogger.info(\"两次输入的密码不一致，请重新输入 pwdValue\", pwdValue)\n\t\tlogger.info(\"两次输入的密码不一致，请重新输入 pwdValueAgain\", pwdValueAgain)\n        alertDialog(\"两次输入的密码不一致，请重新输入\");\n        return;\n\t}\n\tconst { setTempMobile, setMobile } = $getState().myInfo\n    const data = { username: usernameValue , pwd: pwdValue, mobile: setMobile || setTempMobile }\n    Toast.loading('加载中...', CONSTANT.toastLoadingTime, () => {});\n    axios.post(HTTP_URL.registerVerify , (data))\n        .then((response) => {\n            Toast.hide();\n            window.logger.info(`register  response`, response.data);\n            if (response.data.result.response === \"illegal_username\") {\n                alert(\"用户名非法\");\n                return;\n            } else if (response.data.result.response === \"illegal_password\") {\n                alert('密码非法');\n                return;\n            } else if (response.data.result.response === \"username_exist\") {\n                alert('用户名已存在');\n                return;\n            } else if (response.data.result.response === \"modify_success\"){\n                alert('注册成功')\n\t\t\t\twindow.$dispatch(updateUsername(usernameValue));\n                window.$dispatch(updatePassword(pwdValue));\n                window.goRoute(that, \"/login\")\n            } else if(response.data.result.response === \"register_fail\"){\n                alert('注册失败');\n            } else {\n\t\t\t\tlogger.error(\"registerUsername response.data.result\", response.data.result)\n\t\t\t\talert('注册失败');\n\t\t\t}\n        })\n        .catch(err => {\n            Toast.hide();\n            networkErr(err, `registerUsername data: ${data}`);\n        })\n}\n\nexport const resetPasswordFunc = (self, newPwd1, newPwd2) => {\n\tconst { forgetPasswordToken, forgetPasswordTokenOrigin } = $getState().login\n    const token =  forgetPasswordToken || $getState().login.token\n    let data = {};\n    if(!token){\n\t\talertDialog(\"没有token\")\n        return;\n    } else {\n        if(!newPwd1 || !newPwd2) {\n            return alert(\"请填写密码\")\n        } else if (checkPassword(newPwd2) === false) { //密码至少包含一个数字和一个字母\n            alert(\"密码至少包含大小写字母和数字中的两种且长度在6-16位之间\");\n            return;\n        } else if(newPwd1 !== newPwd2) {\n\t\t\treturn alert(\"两次密码不一致\")\n\t\t} else {\n\t\t\tnewPwd1 = newPwd1.trim()\n\t\t\tconst origin = forgetPasswordTokenOrigin === \"email\" ? \"email\" : forgetPasswordTokenOrigin === \"mobile\" ? \"mobile\" : \"systemSetup\"\n\t\t\tif(origin){  // 这里的token是忘记密码或重置密码，两个token是不一样的\n\t\t\t\tdata = Object.assign({}, {newPwd: newPwd1, token, origin});\n\t\t\t} else {\n\t\t\t\treturn alert('未知来源')\n\t\t\t}\n        }\n    }\n\n    Toast.loading('加载中...', CONSTANT.toastLoadingTime, () => {});\n    axios.post(HTTP_URL.resetPassword, data)\n    \t.then((response) => {\n    \t    Toast.hide();\n    \t    window.logger.info(`reset password response`, response.data);\n    \t    if (response.data.result === \"lack_field\") {\n    \t        alert('缺少字段');\n    \t        return;\n    \t    } else if(response.data.result.response === \"username_not_exist\") {\n    \t        alert('用户名不存在');\n    \t    } else if(response.data.result.response === \"wrong_password\") {\n    \t        alert('原密码错误');\n    \t    } else if(response.data.result.response === \"reset_fail\") {\n    \t        alert('重置失败');\n    \t    } else if(response.data.result.response === \"token_expired\") {\n    \t        alert('身份已过期，请重新登录');\n    \t    } else if(response.data.result.result === \"reset_success\"){\n\t\t\t\talert('重置成功');\n\t\t\t\tif(forgetPasswordToken){\n\t\t\t\t\t$dispatch(updateForgetPasswordToken(\"\"))\n\t\t\t\t\t$dispatch(updateForgetPasswordTokenOrigin(\"\"))\n\t\t\t\t\t$dispatch(updatePassword(\"\"))\n\t\t\t\t\twindow.goRoute(self, \"/login\")\n\t\t\t\t} else {\n\t\t\t\t\tlogoutApp(self);\n\t\t\t\t}\n    \t    } else {\n    \t        alertDebug(response.data.response);\n    \t        logger.error(\"resetPasswordFunc response.data.response\", response.data.response)\n    \t    }\n    \t})\n    \t.catch(err => {\n    \t    Toast.hide();\n    \t    networkErr(err, `resetPassword data: ${data}`);\n\t\t})\n}\n\n","let db;\nconst request = window.indexedDB.open(\"recentMusic\", 1);\nrequest.onerror = function (event) {\n\tlogger.error('recentMusic 数据库打开报错');\n};\nrequest.onsuccess = function (event) {\n\tdb = request.result;\n\tlogger.info('recentMusic 数据库打开成功');\n};\n\nrequest.onupgradeneeded = function (event) {\n\tdb = event.target.result;\n\tdb.createObjectStore('recentMusic', { keyPath: 'filenameOrigin' });\n}\n\nexport const addRecentMusicDataFromIndexDB = (contentObj) => {\n\tif (Object.prototype.toString.call(contentObj) !== '[object Object]') {\n\t\treturn Promise.reject(\"error_data_type\")\n\t}\n\treturn new Promise((resolve, reject) => {\n\t\tconst request = db.transaction(['recentMusic'], 'readwrite')\n\t\t\t.objectStore('recentMusic')\n\t\t\t.add(contentObj);\n\n\t\trequest.onsuccess = function (event) {\n\t\t\tresolve(\"success\")\n\t\t\tlogger.info('recentMusic 数据写入成功');\n\t\t};\n\n\t\trequest.onerror = function (event) {\n\t\t\treject(event)\n\t\t\tlogger.warn('recentMusic 数据写入失败');\n\t\t}\n\t})\n}\n\nexport const readAllRecentMusicDataFromIndexDB = () => {\n\tconst result = []\n\treturn new Promise((resolve, reject) => {\n\t\tconst objectStore = db.transaction('recentMusic').objectStore('recentMusic');\n\t\tobjectStore.openCursor().onsuccess = function (event) {\n\t\t\tconst cursor = event.target.result;\n\t\t\tif (cursor) {\n\t\t\t\tresult.push(cursor.value)\n\t\t\t\tcursor.continue();\n\t\t\t} else {\n\t\t\t\tresolve(result)\n\t\t\t}\n\t\t};\n\t})\n\n}\n\nexport const removeRecentMusicDataByIndexFromIndexDB = (queryString) => {\n\treturn new Promise((resolve, reject) => {\n\t\tconst request = db.transaction(['recentMusic'], 'readwrite')\n\t\t\t.objectStore('recentMusic')\n\t\t\t.delete(queryString);\n\n\t\trequest.onsuccess = function (e) {\n\t\t\tconst result = e.target.result;\n\t\t\tlogger.info(\"recentMusic 数据移除成功\", result)\n\t\t\tif (result) {\n\t\t\t\tresolve(result)\n\t\t\t} else {\n\t\t\t\tresolve(\"success\")\n\t\t\t}\n\t\t}\n\t\trequest.onerror = function (event) {\n\t\t\tlogger.error('recentMusic 数据移除失败');\n\t\t\treject(event)\n\t\t}\n\t})\n}\n","import SparkMD5 from \"spark-md5\"\nimport { Howl } from 'howler';\nimport { HTTP_URL } from \"../../constants/httpRoute\";\nimport {\n\tupdateCurrentLocation,\n\tupdateCurrentXYPosition,\n\tupdateCurrentProvince,\n\tupdateAllowGetPosition,\n\tupdateSharedNicknames,\n\tupdateHasDownloadedPackage,\n\tupdateAppUpdating,\n\tupdateTryMobileOrEmailTimes\n} from \"../../ducks/common\"\nimport {\n\tnetworkErr,\n\tsaveFileToLocal,\n\tupdateDownloadingStatus,\n\tcheckFileWritePriority,\n\trequestFileWritePriority,\n\tdebounceOpt,\n\tgenerateRandomUserId,\n\tconfirm,\n} from \"../../services/utils\";\nimport { updateToken, updateLogOutFlag, updateUserId, updateUsername } from \"../../ducks/login\";\nimport { updateLastSignUpTime, updateAlreadySignUpPersons, updateNotSignUpPersons, updateSignUpStatus, updateSignedFlag } from \"../../ducks/sign\";\nimport { updateSetNickname,\n\tupdateSetMobile,\n\tupdateSignature,\n\tupdateSetSex,\n\tupdateSetBirthday,\n\tupdateSetHeadPic,\n\tupdateSetRole,\n\tupdateSetEmail,\n} from \"../../ducks/myInfo\";\nimport {\n\tupdateFileList,\n\tupdateMusicList,\n\tupdateDownloadedMusicList,\n\tupdateMusicCollection,\n\tupdateCurrentSongTime,\n\tupdateSoundPlaying,\n\tupdateCurrentPlayingMusicList,\n\tupdateCurrentPlayingSong,\n\tupdateCurrentPlayingSongDuration,\n\tupdateCurrentPlayingSongOriginal,\n\tupdateSoundInstance,\n\tupdateSoundInstanceId,\n\tupdateMusicPageType,\n\tupdateRecentMusicList,\n\tupdatePauseWhenOver,\n\tupdatePlayByOrder,\n\tupdateMusicMenuBadge,\n\tupdatePlayByRandom,\n\tupdateCurrentMusicItemInfo,\n\tupdateDownloadedFileList,\n\tupdateShowMusicPlayingFromMusicControl\n} from \"../../ducks/fileServer\";\nimport { updateOnlinePersons } from \"../../ducks/sign\";\nimport { removeDataByIndexFromIndexDB, readAllDataFromIndexDB } from \"../../services/indexDB\"\nimport { dealtWithLogin } from \"../../logic/login\"\nimport { removeMusicDataByIndexFromIndexDB } from \"../../services/indexDBMusic\"\nimport { CONSTANT } from \"../../constants/enumeration\"\nimport { addRecentMusicDataFromIndexDB, removeRecentMusicDataByIndexFromIndexDB } from \"../../services/indexDBRecentMusic\"\n\nconst logger = window.logger || console;\nlet receiveServerSocketPong = false;\nlet reconnectAndSendTimeout = null;\nconst callbackFunc = (index) => {\n\tlogger.info(\"callbackFunc  index\", index)\n\tif(reconnectAndSendTimeout) clearInterval(reconnectAndSendTimeout)\n}\nlet observer1 = null;\n\nexport const retrieveOthers = () => {\n\tconst { token } = window.$getState().login;\n\tif(token){\n\t\tconst data = Object.assign({}, { token });\n\t\treturn axios.post(HTTP_URL.retrieveOthers, (data))\n\t\t\t.then((response) => {\n\t\t\t\tconst responseText = response.data;\n\t\t\t\twindow.logger.info(`retrieve_others  response`, responseText.result.response.length);\n\t\t\t\t$dispatch(updateSharedNicknames(responseText.result.sharedNicknames))\n\t\t\t\tsetOthersSignInfo(responseText.result.response)\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tlogger.error(\"retrieveOthers  err\", err)\n\t\t\t})\n\t}\n}\n\nexport const setOthersSignInfo = (data) => {\n\tif(!data.length) return;\n\tlet date = new Date().format(\"yyyy-MM-dd\"),\n\t    info = data,\n\t\tsignedArray = [],\n\t\tunsignedArray = [];\n\tfor (let i = 0, l = info.length; i < l; i++) {\n\t\tif (info[i].date && info[i].date.split(' ')[0] === date) {\n\t\t\tsignedArray.push({\n\t\t\t\tusername: info[i].username || info[i].mobile,\n\t\t\t\torigin: info[i].origin\n\t\t\t});\n\t\t} else {\n\t\t\tunsignedArray.push({\n\t\t\t\tusername: info[i].username  || info[i].mobile,\n\t\t\t\torigin: info[i].origin\n\t\t\t});\n\t\t}\n\t}\n\twindow.logger.info(`setOthersSignInfo signedArray`, signedArray.length);\n\twindow.logger.info(`setOthersSignInfo unsignedArray`, unsignedArray.length);\n\t// const alreadySignUpPersons = _.orderBy(signedArray, ['username'], ['desc'])\n\t// const notSignUpPersons = _.orderBy(unsignedArray, ['username'], ['desc'])\n\twindow.$dispatch(updateAlreadySignUpPersons(signedArray))\n\twindow.$dispatch(updateNotSignUpPersons(unsignedArray))\n}\n\n//cordova version\nexport const getUserPosition = (self) => {\n\n\tconst permissions = cordova.plugins.permissions;\n\tpermissions.checkPermission(permissions.ACCESS_FINE_LOCATION, function (status) {\n\t\tlogger.info(\"getUserPosition ACCESS_FINE_LOCATION\", status);\n\t\tif (status.hasPermission) {\n\t\t\t//定位数据获取成功响应\n\t\t\tvar onSuccess = function (position) {\n\t\t\t\tif (!position) return;\n\t\t\t\twindow.logger.info(`getUserPosition onSuccess position`, position);\n\t\t\t\tvar point = new window.BMap.Point(position.coords.longitude, position.coords.latitude); //纬度,经度\n\t\t\t\tvar gc = new window.BMap.Geocoder();\n\t\t\t\tvar pt = point;\n\t\t\t\twindow.$dispatch(updateCurrentXYPosition([pt.lng, pt.lat]))\n\t\t\t\tgc.getLocation(pt, function (rs) {\n\t\t\t\t\tvar addComp = rs.addressComponents;\n\t\t\t\t\twindow.logger.info(`地理位置信息`, addComp);\n\t\t\t\t\tvar location = addComp.province + addComp.city + addComp.district + addComp.street + addComp.streetNumber;\n\t\t\t\t\twindow.$dispatch(updateCurrentProvince(addComp.province))\n\t\t\t\t\twindow.$dispatch(updateCurrentLocation(location))\n\t\t\t\t});\n\t\t\t};\n\t\t\t//定位数据获取失败响应\n\t\t\tfunction onError(error) {\n\t\t\t\tlogger.warn('getUserPosition error code: ', error.code, 'message: ', error.message);\n\t\t\t}\n\n\t\t\tfunction onSuccessWatch() {\n\t\t\t\tlogger.debug(\"avigator.geolocation.watchPosition\");\n\t\t\t\tonSuccess()\n\t\t\t}\n\t\t\t//开始获取定位数据\n\t\t\tlogger.info(\"getting geo location\")\n\t\t\tnavigator.geolocation.getCurrentPosition(onSuccess, onError, {\n\t\t\t\tenableHighAccuracy: true\n\t\t\t});\n\t\t\tif (window.watchID) navigator.geolocation.clearWatch(watchID);\n\t\t\twindow.watchID = navigator.geolocation.watchPosition(onSuccessWatch, onError, {\n\t\t\t\tenableHighAccuracy: true\n\t\t\t});\n\t\t} else {\n\t\t\tlogger.info(\"ACCESS_FINE_LOCATION no\");\n\t\t}\n\t});\n}\n\n// h5 version\nexport const getLocation = () => {\n\tif (navigator.geolocation) {\n\t\tnavigator.geolocation.getCurrentPosition(showPosition, showError);\n\t\tif(window.watchID) navigator.geolocation.clearWatch(watchID);\n\t\twindow.watchID = navigator.geolocation.watchPosition(showPosition, showError, { enableHighAccuracy: true });\n\t} else {\n\t\twindow.logger.info('浏览器不支持地理定位。')\n\t}\n}\n\nexport const requestPositionPermission = () => {\n\treturn new Promise(res => {\n\t\tnavigator.geolocation.getCurrentPosition(() => {\n\t\t\tlogger.info(\"getCurrentPosition yes\")\n\t\t\t$dispatch(updateAllowGetPosition(true))\n\t\t\tres(true)\n\t\t}, () => {\n\t\t\tlogger.info(\"getCurrentPosition no\")\n\t\t\t$dispatch(updateAllowGetPosition(false))\n\t\t\tres(false)\n\t\t}, {\n\t\t\tenableHighAccuracy: true\n\t\t});\n\t})\n}\n\nexport const previewNew = (fileEntry, mineType = 'application/vnd.android.package-archive') => {\n\tlogger.info(\"window.cordova.plugins.fileOpener2.open fileEntry.name\", fileEntry && fileEntry.name, 'mineType', mineType)\n\t// 调用cordova-plugin-file-opener2插件实现用第三方app打开文件\n\twindow.cordova.plugins.fileOpener2.open(\n\t\t// 此处必须填写cdvfile://地址，不然android7.0+会报文件权限错误\n\t\tfileEntry.toInternalURL(), //文件本地地址转cdvfile://地址\n\t\tmineType, //文件类型，这里我是写了一个mime-Type类型合集fileTypeArr来调用\n\t\tfunction onSuccess(data) {\n\t\t\twindow.logger.info(`成功预览`, data);\n\t\t},\n\t\tfunction onError(error) {\n\t\t\talertDebug('出错！请在' + window.cordova.file.externalApplicationStorageDirectory + '目录下查看')\n\t\t\twindow.logger.error('出错！请在' + window.cordova.file.externalApplicationStorageDirectory + '目录下查看');\n\t\t}\n\t);\n}\n\nexport const openDownloadedFile = (filename, mineType, filenameOrigin) => {\n\tif(window.isCordova){\n\t\tcordova.plugins.fileOpener2.open(\n\t\t\t`cdvfile://localhost/sdcard/miXingFeng/download/${filenameOrigin}`,\n\t\t\tmineType,\n\t\t\t{\n\t\t\t\terror : function(e) {\n\t\t\t\t\tlogger.error('openDownloadedFile  Error status: ' + e.status + ' - Error message: ' + e.message);\n\t\t\t\t\tif(e.message === \"File not found\"){\n\t\t\t\t\t\talertDialog(filename + \"已删除\")\n\t\t\t\t\t\tremoveFileFromDownload(filenameOrigin, \"file\")\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsuccess : function () {\n\t\t\t\t\tlogger.info('openDownloadedFile  file opened successfully');\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t} else {\n\t\talert(\"暂不支持浏览器打开文件\")\n\t}\n}\n\nexport const removeFileFromDownload = (filenameOrigin, type) => {\n\tlet localFileLocation, removeRecordFromIndexedDBPromise = Promise.resolve()\n\tif(type === \"file\"){\n\t\tlocalFileLocation = `cdvfile://localhost/sdcard/miXingFeng/download/${filenameOrigin}`\n\t\tconst { fileList=[], downloadedFileList } = $getState().fileServer;\n\t\tfileList.some(item => {\n\t\t\tif(item.filenameOrigin === filenameOrigin){\n\t\t\t\tif(item.downloaded){\n\t\t\t\t\tdelete item.downloaded\n\t\t\t\t\treturn true  //终止循环以优化性能\n\t\t\t\t} else {\n\t\t\t\t\tlogger.warn(\"no downloaded to be deleted from fileList filenameOrigin\", filenameOrigin)\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\t$dispatch(updateFileList(fileList))  // 去除共享文件里已下载的标记\n\t\tremoveRecordFromIndexedDBPromise = removeDataByIndexFromIndexDB(`downloaded_${filenameOrigin}`)\n\t\t\t.then(() => {\n\t\t\t\tconst downloadedFileListCopy = JSON.parse(JSON.stringify(downloadedFileList))\n\t\t\t\tlet index = null\n\t\t\t\tdownloadedFileListCopy.some((item, i) => {\n\t\t\t\t\tif(removePrefixFromFileOrigin(item.filenameOrigin) === filenameOrigin){\n\t\t\t\t\t\tindex = i\n\t\t\t\t\t\treturn true\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\tif(index === null){\n\t\t\t\t\tlogger.warn(\"no downloaded to be deleted from file downloaded filenameOrigin\", filenameOrigin)\n\t\t\t\t} else {\n\t\t\t\t\tdownloadedFileListCopy.splice(index, 1)\n\t\t\t\t\t$dispatch(updateDownloadedFileList(downloadedFileListCopy))\n\t\t\t\t\treturn \"success\"\n\t\t\t\t}\n\t\t\t}).catch((err) => {\n\t\t\t\tlogger.error(\"removeFileFromDownload file err\", err)\n\t\t\t})\n\t} else if(type === \"music\"){\n\t\tlocalFileLocation = `cdvfile://localhost/sdcard/miXingFeng/music/${filenameOrigin}`\n\t\tremoveRecordFromIndexedDBPromise = removeMusicDataByIndexFromIndexDB(`downloaded_${filenameOrigin}`)\n\t\t\t.then(() => {\n\t\t\t\tconst { downloadedMusicList } = $getState().fileServer\n\t\t\t\tconst downloadedMusicListCopy = JSON.parse(JSON.stringify(downloadedMusicList))\n\t\t\t\tdownloadedMusicList.some((item, index) => {\n\t\t\t\t\tif(removePrefixFromFileOrigin(item.filenameOrigin) === filenameOrigin){\n\t\t\t\t\t\tdownloadedMusicListCopy.splice(index, 1)\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t$dispatch(updateDownloadedMusicList(downloadedMusicListCopy))\n\t\t\t\treturn \"success\"\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\talertDebug(\"removeMusicDataByIndexFromIndexDB err\")\n\t\t\t\tlogger.error(\"removeFileFromDownload music err\", err)\n\t\t\t})\n\t}\n\tconst removeFileFromDiskPromise = new Promise((resolve, reject) => {\n\t\twindow.resolveLocalFileSystemURL(localFileLocation, function (fileEntry) {\n\t\t\tfileEntry.remove(function () {\n\t\t\t\tlogger.info(\"removeFileFromDownload success\")\n\t\t\t\tresolve('success')\n\t\t\t}, function (err) {\n\t\t\t\tlogger.error('removeFileFromDownload err', err);\n\t\t\t\treject(err)\n\t\t\t}, function () {\n\t\t\t\tlogger.warn(\"removeFileFromDownload file_not_exist\")\n\t\t\t\tresolve('file_not_exist')\n\t\t\t});\n\t\t})\n\t})\n\n\treturn Promise.all([removeRecordFromIndexedDBPromise, removeFileFromDiskPromise])\n\t\t.then((response) => {\n\t\t\tlogger.info(\"removeFileFromDownload response\", response)\n\t\t\treturn response\n\t\t})\n\t\t.catch(err => {\n\t\t\talert(\"删除失败\")\n\t\t\tlogger.error(\"removeFileFromDownload err\", err)\n\t\t})\n}\n\nfunction showPosition(position) {\n\t\tvar location = position.coords.latitude + ',' + position.coords.longitude;\n\t\tlogger.info(`location`, location);\n\t\treturn axios.get(HTTP_URL.getPositionFromH5.format({location}))\n\t\t\t.then(response => {\n\t\t\t\tconst result = response.data.result.response\n\t\t\t\tlogger.info(\"showPosition result\", result)\n\t\t\t\tif (result.status === 0) {\n\t\t\t\t\ttry{\n\t\t\t\t\t\tlogger.info(`您当前的位置`, result.result);\n\t\t\t\t\t\t$dispatch(updateCurrentXYPosition([result.result.location.lng, result.result.location.lat]))\n\t\t\t\t\t\t$dispatch(updateCurrentProvince(result.result.addressComponent.province))\n\t\t\t\t\t\t$dispatch(updateCurrentLocation(result.result.formatted_address));\n\t\t\t\t\t} catch (err){\n\t\t\t\t\t\tlogger.error('showPosition err', err)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n}\n\nfunction showError (error) {\n\tlogger.warn(`showPosition showError`, error && (error.message || error));\n\tswitch(error.code) {\n\t\tcase error.PERMISSION_DENIED:\n\t\t\twindow.logger.warn(\"定位失败,用户拒绝请求地理定位\")\n\t\t\tbreak;\n\t\tcase error.POSITION_UNAVAILABLE:\n\t\t\twindow.logger.warn(\"定位失败,位置信息是不可用\")\n\t\t\tbreak;\n\t\tcase error.TIMEOUT:\n\t\t\twindow.logger.warn(\"定位失败,请求获取用户位置超时\")\n\t\t\tbreak;\n\t\tcase error.UNKNOWN_ERROR:\n\t\t\twindow.logger.warn(\"定位失败,定位系统失效\")\n\t\t\tbreak;\n\t\tdefault:\n\t\t\twindow.logger.warn(\"发生了错误!\")\n\t\t\tbreak;\n\t}\n}\n\nexport const logoutApp = async(self) => {\n\twindow.localStorage.removeItem(\"tk\");\n\tconst { username=\"\" } = $getState().login\n\tconst { setMobile=\"\", setEmail=\"\" } = $getState().myInfo\n\t$dispatch(updateToken(\"\"));\n\t$dispatch(updateLastSignUpTime(\"\"));\n\t$dispatch(updateAlreadySignUpPersons([]));\n\t$dispatch(updateNotSignUpPersons([]));\n\t$dispatch(updateSignUpStatus(false));\n\t$dispatch(updateLogOutFlag(true));\n\t$dispatch(updateSetNickname(\"\"));\n\t$dispatch(updateSignature(\"\"));\n\t$dispatch(updateSetSex(\"\"));\n\t$dispatch(updateSetBirthday(\"\"));\n\t$dispatch(updateSetHeadPic(\"\"));\n\t$dispatch(updateSignedFlag(\"\"));\n\t$dispatch(updateSetRole(\"\"));\n\t$dispatch(updateSetEmail(\"\"));\n\t$dispatch(updateSetMobile(\"\"));\n\t$dispatch(updateUsername(\"\"));\n\t$dispatch(updateMusicCollection([]));\n\t$dispatch(updateSharedNicknames([]))\n\tlocalStorage.removeItem(\"lastSignUpTime\")\n\tlocalStorage.removeItem(\"alreadySignUpPersons\")\n\tlocalStorage.removeItem(\"notSignUpPersons\")\n\tlocalStorage.removeItem(\"userProfile\")\n\tlocalStorage.removeItem(\"role\")\n\tlocalStorage.removeItem(\"favoriteSongs\")\n\tlocalStorage.setItem(\"username\", username)\n\tlocalStorage.setItem(\"mobile\", setMobile)\n\tlocalStorage.setItem(\"email\", setEmail)\n\tgoRoute(self, \"/login\");\n}\n\nexport const autoLogin = function(token){\n\treturn new Promise((res,rej) => {\n\t\tconst data = Object.assign({}, { token })\n\t\treturn axios.post(HTTP_URL.tokenLogin, data)\n\t\t\t.then((response) => {\n\t\t\t\tlet result = response.data.result;\n\t\t\t\tif (result.token) {\n\t\t\t\t\tresult.autoLogin = true\n\t\t\t\t\tdealtWithLogin(result)\n\t\t\t\t\tres()\n\t\t\t\t} else if (result === 'token_expired') {\n\t\t\t\t\twindow.logger.warn(\"身份已过期,请重新登录\");\n\t\t\t\t\talert(\"身份已过期,请重新登录\");\n\t\t\t\t\trej()\n\t\t\t\t} else {\n\t\t\t\t\twindow.logger.warn(\"非法登录\");\n\t\t\t\t\talert(\"非法登录\");\n\t\t\t\t\trej()\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\twindow.logger.error(`autoLogin err`, err);\n\t\t\t\tnetworkErr(err, `autoLogin data: ${data}`)\n\t\t\t})\n\t})\n}\n\nexport const calcSize = (size) => {\n\tlet formatSize = \"\";\n\tif(!size) return \"未知\"\n\tif(typeof(size) !== 'number'){\n\t\treturn String(size)\n\t}\n\tif(size > 1073741824){\n\t\tformatSize = (size/1024/1024/1024).toFixed(2) + \"GB\";\n\t} else if(size > 1048576){\n\t\tformatSize = (size/1024/1024).toFixed(2) + \"MB\";\n\t} else if(size > 1024){\n\t\tformatSize = (size/1024).toFixed(2) + \"KB\";\n\t} else if(size < 1024){\n\t\tformatSize = size + \"B\";\n\t}\n\treturn formatSize;\n}\n\nexport const reconnectAndSend = (log=\"websocket interval check\") => {\n\ttry {\n\t\tif(window.isCordova){\n\t\t\tconst isBackground = cordova.plugins && cordova.plugins.backgroundMode && cordova.plugins.backgroundMode.isActive();\n\t\t\tlogger.debug('isBackground', isBackground);\n\t\t}\n\t\tlogger.debug(\"websocket heart beat reconnectAndSend readyState ping\", window.ws.readyState, \"log\", log)\n\t\tif(window.ws.readyState !== 1){\n\t\t\tlogger.debug(\"reconnectAndSend window.ws.readyState !== 1\", log)\n\t\t\treconnectSocket(`heart beat: ${log}`)\n\t\t} else {\n\t\t\tlet message = Object.assign({},{ type:'check-connect', userId: $getState().login.userId, data: \"ping\", date: Date.now() });\n\t\t\twindow.ws.send(JSON.stringify(message));\n\t\t\treceiveServerSocketPong = false;\n\t\t\t//  10秒超时，如何收不到服务端pong响应则表示服务端已主动断开连接，此时需客户端重新开启websocket连接\n\t\t\treconnectAndSendTimeout = setTimeout(() => {\n\t\t\t\tlogger.warn(\"reconnectAndSendTimeout reconnectSocket\", log)\n\t\t\t\treconnectAndSendTimeout = null\n\t\t\t\treconnectSocket('heart beat')\n\t\t\t}, 10000)\n\t\t}\n\t} catch(err){\n\t\tlogger.error(\"reconnectAndSend err\", err)\n\t}\n}\n\nexport const initWebsocket = () => {\n\tlet userId = generateRandomUserId()\n\tif(window.localStorage.getItem(\"userId\")){\n\t\tuserId = window.localStorage.getItem(\"userId\")\n\t}\n\t$dispatch(updateUserId(userId))\n\tif(window.WebSocket){\n\t\twindow.ws = new WebSocket(window.config.debug ? `ws://${window.config.host}:${window.config.socketPort}` : `wss://${window.config.socketUrl}`);\n\t\twindow.ws.onopen = () => {\n\t\t\topenWS(ws.readyState, userId)\n\t\t};\n\t\twindow.ws.onmessage = (data) => incomingMessage(data);\n\t\treconnectNetwork()  // check network\n\t\tobserver1 = new Observer(callbackFunc)\n\t\twindow.subjectModel.subscribeObserver(observer1)\n\t} else {\n\t\tlogger.warn(\"不支持webSocket！！！\")\n\t}\n}\n\nexport const reconnectSocket = (logInfo) => {\n\tconst userId = $getState().login.userId\n\tif(window.ws && window.ws.close) window.ws.close(1000)\n\tif(window.websocketHeartBeatInterval) clearInterval(window.websocketHeartBeatInterval)\n\tlogger.debug(\"正在重新建立websocket连接...\", logInfo);\n\twindow.ws = new WebSocket(window.config.debug ? `ws://${window.config.host}:${window.config.socketPort}` : `wss://${window.config.socketUrl}`);\n\twindow.ws.onopen = () => openWS(window.ws.readyState, userId);\n\twindow.ws.onmessage = (data) => incomingMessage(data);\n}\n\nexport const openWS = (readyState, userId) => {\n\tlogger.info('websocket connected', readyState, \"当前用户id\", userId);\n\tconst msg = Object.assign({},{\n\t\ttype:'try-connect',\n\t\tuserId,\n\t\tdate: Date.now(),\n\t\tdata: \"\"\n\t})\n\twindow.ws.send(JSON.stringify(msg));\n\t// websocket heart beat\n\twindow.websocketHeartBeatInterval = setInterval(reconnectAndSend, 60000)\n}\n\nexport const incomingMessage = async (data) => {\n\ttry {\n\t\tconst userId = $getState().login.userId\n\t\tconst logger = window.logger || console;\n\t\tdata = JSON.parse(data.data);\n\t\tswitch(data.type){\n\t\t\tcase \"pong\":\n\t\t\t\tlogger.debug('incomingMessage pong', data);\n\t\t\t\treceiveServerSocketPong = true;\n\t\t\t\tsubjectModel.notifyObserver(observer1)\n\t\t\t\tbreak;\n\t\t\tcase \"socket-heart-beat\":\n\t\t\t\tlogger.info('incomingMessage server-socket-heart-beat', data);\n\t\t\t\tconst msg = {\n\t\t\t\t\ttype:'check-connect',\n\t\t\t\t\tuserId,\n\t\t\t\t\tdata: \"reply-server-heart-beat\",\n\t\t\t\t\tdate: Date.now()\n\t\t\t\t}\n\t\t\t\twindow.ws.send(JSON.stringify(msg));\n\t\t\t\tbreak;\n\t\t\tcase \"response-date\":\n\t\t\t\tlogger.info(`incomingMessage Roundtrip time: ${Date.now() - data.data} ms`);\n\t\t\t\tbreak;\n\t\t\tcase \"order-string\":\n\t\t\t\tlogger.info('incomingMessage 用户加入', data.data);\n\t\t\t\tbreak;\n\t\t\tcase \"online-persons\":\n\t\t\t\t$dispatch(updateOnlinePersons(data.data));\n\t\t\t\tlogger.info(`incomingMessage 当前在线人数: ${data.data}`);\n\t\t\t\tbreak;\n\t\t\tcase \"get-sign-array\":\n\t\t\t\tlogger.info('incomingMessage get-sign-array', data.data.length);\n\t\t\t\tif($getState().login.token){\n\t\t\t\t\tsetOthersSignInfo(data.data)\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"get-files-array\":\n\t\t\t\tconst fileDataList = data.data;\n\t\t\t\tconst indexDBData = await readAllDataFromIndexDB()\n\t\t\t\tindexDBData.forEach((item1) => {\n\t\t\t\t\tfileDataList.forEach((item2) => {\n\t\t\t\t\t\tif(removePrefixFromFileOrigin(item1.filenameOrigin) === item2.filenameOrigin){\n\t\t\t\t\t\t\titem2.downloaded = true\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t\tfileDataList.forEach((item2) => {\n\t\t\t\t\titem2.filePath = window.serverHost + item2.filePath\n\t\t\t\t})\n\t\t\t\t$dispatch(updateFileList(fileDataList));\n\t\t\t\tlogger.info('incomingMessage get-files-array', fileDataList.length);\n\t\t\t\tbreak;\n\t\t\tcase \"get-musics-array\":\n\t\t\t\tconst { musicCollection } = $getState().fileServer\n\t\t\t\tconst musicList = data.data\n\t\t\t\tmusicList.forEach(item => {\n\t\t\t\t\titem.filePath = window.serverHost + item.filePath\n\t\t\t\t})\n\t\t\t\tmusicCollection.forEach(item1 => {\n\t\t\t\t\tmusicList.forEach(item2 => {\n\t\t\t\t\t\tif(removePrefixFromFileOrigin(item1.filenameOrigin) === removePrefixFromFileOrigin(item2.filenameOrigin)){\n\t\t\t\t\t\t\titem2.saved = true;  //这样做可以修改堆里的值\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t\t$dispatch(updateMusicList(musicList));\n\t\t\t\tlogger.info('incomingMessage get-musics-array', musicList.length);\n\t\t\t\tbreak;\n\t\t\tcase \"get-current-position\":\n\t\t\t\tlogger.info('incomingMessage get-current-position', data);\n\t\t\t\tconst { allowOthersGetPosition } = $getState().common\n\t\t\t\tconst info = {\n\t\t\t\t\ttype:'upload-user-position',\n\t\t\t\t\tuserId,\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tinfo: \"available\",\n\t\t\t\t\t\tcurrentLocation: $getState().common.currentLocation,\n\t\t\t\t\t\tcurrentXYPosition: $getState().common.currentXYPosition\n\t\t\t\t\t},\n\t\t\t\t\tdate: Date.now()\n\t\t\t\t}\n\t\t\t\tif(!allowOthersGetPosition){\n\t\t\t\t\tinfo.data.info = \"user_not_allowed\"\n\t\t\t\t}\n\t\t\t\twindow.ws.send(JSON.stringify(info));\n\t\t\t\talert(`${data.data}获取了你的位置`)\n\t\t\t\tbreak;\n\t\t\tcase \"update-share-nickname\":\n\t\t\t\tlogger.info('incomingMessage update-share-nickname length', data.data.length);\n\t\t\t\t$dispatch(updateSharedNicknames(data.data))\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tlogger.error(\"incomingMessage default error\", data)\n\t\t\t\tbreak;\n\t\t}\n\t} catch (err){\n\t\tlogger.error(\"onmessage JSON.parse\", err.stack || err.toString())\n\t}\n}\n\nfunction reconnectNetwork(){\n\tlet networkFlag  = false;\n\tlet debounceTimeout = null;\n\tconst logger = window.logger || console;\n\tdocument.addEventListener(\"offline\", function(){ // 断开网络\n\t\ttry{\n\t\t\twindow.ws.close(1000)\n\t\t\tlogger.warn('addEventListener reconnectNetwork  offline before setTimeout')\n\t\t\tnetworkFlag = true;\n\t\t\tdebounceTimeout = setTimeout(() => {\n\t\t\t\tlogger.warn('reconnectNetwork  offline 无法访问网络')\n\t\t\t\twindow.plugins.toast.showShortBottom('无法访问网络')\n\t\t\t}, 5000)\n\t\t} catch(err){\n\t\t\tlogger.error(\"addEventListener offline after setTimeout\", err)\n\t\t}\n\t}, false);\n\tdocument.addEventListener(\"online\", function(){  // 连接到网络\n\t\ttry {\n\t\t\tif(networkFlag === true){\n\t\t\t\tclearTimeout(debounceTimeout);\n\t\t\t\tlogger.info('addEventListener reconnectNetwork  online')\n\t\t\t\twindow.plugins.toast.showShortBottom('网络已恢复')\n\t\t\t\tnetworkFlag = false;\n\t\t\t\tlogger.warn(\"addEventListener online websocket 正在重新建立连接...\");\n\t\t\t\tconst userId = $getState().login.userId\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\twindow.ws = new WebSocket(window.config.debug ? `ws://${window.config.host}:${window.config.socketPort}` : `wss://${window.config.socketUrl}`);\n\t\t\t\t\twindow.ws.onopen = () => openWS(window.ws.readyState, userId);\n\t\t\t\t\twindow.ws.onmessage = (data) => incomingMessage(data);\n\t\t\t\t}, 200)\n\t\t\t}\n\t\t} catch(err) {\n\t\t\tlogger.error(\"document.addEventListener online\", err)\n\t\t}\n\t}, false);\n}\n\nexport const checkFileMD5Func = (filename, uploadUsername, md5, group, type) => {\n\tconst checkFileMD5Obj = {\n\t\tfilename,\n\t\tuploadUsername,\n\t\tmd5,\n\t\tgroup,\n\t\ttype\n\t}\n\treturn axios.post(HTTP_URL.checkFileMD5, checkFileMD5Obj)\n\t\t.then((response) => {\n\t\t\tif(response.data.result.response === 'lack_fields'){\n\t\t\t\treturn \"缺少字段\"\n\t\t\t} else if(response.data.result.response === 'success'){\n\t\t\t\treturn \"上传成功\"\n\t\t\t} else if(response.data.result.response === 'no_matches'){\n\t\t\t\treturn \"没有匹配\"\n\t\t\t}\n\t\t})\n\t\t.catch(err => {\n\t\t\treturn networkErr(err, `checkFileMD5Func checkFileMD5Obj: ${checkFileMD5Obj}`)\n\t\t})\n}\n\n// 移除后进来的项\nexport const removeDuplicateObjectList = (list=[{}], field=\"filenameOrigin\", options={}) => {\n\tif(!list.length) return list;\n\tconst tempObj = {}\n\tlet willRemoveIndex = null\n\tfor(let i=0; i< list.length; i++){\n\t\tif(!list[i][field] || tempObj[list[i][field]]){\n\t\t\twillRemoveIndex = i;\n\t\t\tbreak\n\t\t} else {\n\t\t\ttempObj[list[i][field]] = true\n\t\t}\n\t}\n\tif(willRemoveIndex !== null){\n\t\tif(!options.noWarn) logger.error(\"removeDuplicateObjectList same file field\", field, \"list[willRemoveIndex]\", list[willRemoveIndex])\n\t\tlist.splice(willRemoveIndex, 1)\n\t\treturn removeDuplicateObjectList(list, field, options)\n\t} else {\n\t\treturn list\n\t}\n}\n\n// 移除先进来的项且对filenameOrigin去除前缀\nexport const removeDuplicateObjectList2 = (dataSource) => {\n\tconst tempObj = {}\n\tdataSource.forEach(item => {\n\t\ttempObj[removePrefixFromFileOrigin(item.filenameOrigin)] = item\n\t})\n\treturn tempObj\n}\n\nexport const calcFileMD5 = (file) => {\n\treturn new Promise((resolve, reject) => {\n\t\tconst blobSlice = BrowserFile.prototype.slice || BrowserFile.prototype.mozSlice || BrowserFile.prototype.webkitSlice,\n\t\t\tchunkSize = 2097152, // Read in chunks of 2MB\n\t\t\tchunks = Math.ceil(file.size / chunkSize),\n\t\t\tspark = new SparkMD5.ArrayBuffer(),\n\t\t\tfileReader = new BrowserFileReader();\n\n\t\tlet currentChunk = 0;\n\t\tlogger.info(\"SparkMD5 file size, filename\", file.size, file.name)\n\t\tfileReader.onload = function (e) {\n\t\t\tspark.append(e.target.result); // Append array buffer\n\t\t\tcurrentChunk++;\n\t\t\tif (currentChunk < chunks) {\n\t\t\t\tloadNext();\n\t\t\t} else {\n\t\t\t\tconst MD5Value = spark.end()\n\t\t\t\tlogger.info('calcFileMD5 SparkMD5 computed hash', MD5Value); // Compute hash\n\t\t\t\treturn resolve({\n\t\t\t\t\tMD5Value,\n\t\t\t\t\tMD5ValueError: null\n\t\t\t\t})\n\t\t\t}\n\t\t};\n\t\tfileReader.onerror = function (err) {\n\t\t\ttry {\n\t\t\t\tlogger.warn('SparkMD5 oops, something went wrong.', err);\n\t\t\t} catch (err) {\n\t\t\t\tlogger.error(\"logger SparkMD5 oops, something went wrong.\", err)\n\t\t\t\talertDebug(err)\n\t\t\t}\n\t\t\treturn resolve({\n\t\t\t\tMD5Value: null,\n\t\t\t\tMD5ValueError: err\n\t\t\t})\n\t\t};\n\n\t\tfunction loadNext() {\n\t\t\tvar start = currentChunk * chunkSize,\n\t\t\t\tend = ((start + chunkSize) >= file.size) ? file.size : start + chunkSize;\n\t\t\tfileReader.readAsArrayBuffer(blobSlice.call(file, start, end));\n\t\t}\n\t\tloadNext();\n\n\t})\n}\n\nexport const checkPassword = (password) => {\n\tif(/^(?=(?=.*[a-z])(?=.*[A-Z])|(?=.*[a-z])(?=.*\\d)|(?=.*[A-Z])(?=.*\\d))[^]{6,16}$/.test(password)){\n\t\treturn true\n\t} else {\n\t\treturn false\n\t}\n}\n\nexport const checkEmail = (email) => {\n\tif(/^[0-9a-zA-Z_.-]+[@][0-9a-zA-Z_.-]+([.][a-zA-Z]+){1,2}$/g.test(email)){\n\t\treturn true\n\t} else {\n\t\treturn false\n\t}\n}\n\nexport const checkMobilePhone = (mobile) => {\n\tif(/^[1]([3-9])[0-9]{9}$/g.test(mobile.replace(/\\s/g, \"\"))){\n\t\treturn true\n\t} else {\n\t\treturn false\n\t}\n}\n\nexport const checkSongSavedFunc = (musicDataList, original) => {\n\tconst { musicCollection } = $getState().fileServer\n\tif(original !== CONSTANT.musicOriginal.savedSongs){\n\t\tmusicDataList.forEach(item => {\n\t\t\tdelete item.saved\n\t\t})\n\t\tmusicCollection.forEach(item1 => {\n\t\t\tmusicDataList.some(item2 => {  //  在当前页将收藏的音乐加上标记\n\t\t\t\tif(removePrefixFromFileOrigin(item1.filenameOrigin) === removePrefixFromFileOrigin(item2.filenameOrigin)){\n\t\t\t\t\titem2.saved = true;\n\t\t\t\t\treturn true\n\t\t\t\t} else {\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t}\n\treturn musicDataList\n}\n\nexport const removePrefixFromFileOrigin = (filenameOrigin) => {\n\tif(!filenameOrigin) return\n\treturn filenameOrigin.replace(/downloading_|downloaded_|saved_|searchAll_|onlineMusic_|searchMusic_|recent_/g, \"\")\n}\n\nexport const checkOnlinePersons = () => {\n\tconst userId = $getState().login.userId\n\tconst msg = Object.assign({},{\n\t\ttype:'try-connect',\n\t\tuserId,\n\t\tdate: Date.now(),\n\t\tdata: \"\"\n\t})\n\tif(window.ws && window.ws.readyState === 1){\n\t\tws.send(JSON.stringify(msg));\n\t}\n}\n\nexport const saveSongFunc = ({\n\tsavedMusicFilenameOriginalArr,\n\tfilenameOrigin,\n\tmusicCollection,\n\tmusicDataList,\n\tcurrentFileIndex,\n\toriginal,\n\te,\n\tpageType\n}) => {\n\ttry {\n\t\tif(e) e.stopPropagation();\n\t\tif(currentFileIndex === -1 || currentFileIndex === null) return alert(\"请选择一首歌播放\")\n\t\tconst { username, token } = $getState().login\n\t\tconst { setMobile } = $getState().myInfo\n\t\tif (!token) return alert(\"请先登录\")\n\t\tconst hasSaved = savedMusicFilenameOriginalArr.indexOf(removePrefixFromFileOrigin(filenameOrigin));\n\t\tconst musicCollectionCopy = JSON.parse(JSON.stringify(musicCollection))\n\t\tconst musicDataListCopy = JSON.parse(JSON.stringify(musicDataList))\n\t\tif (hasSaved !== -1) {\n\t\t\tif(original === CONSTANT.musicOriginal.savedSongs){\n\t\t\t\tmusicDataListCopy.splice(hasSaved, 1)\n\t\t\t}\n\t\t\tmusicCollectionCopy.splice(hasSaved, 1)\n\t\t} else {\n\t\t\tconst willSavedSong = JSON.parse(JSON.stringify(musicDataList[currentFileIndex]))\n\t\t\twillSavedSong.filenameOrigin = `saved_${willSavedSong.filenameOrigin}`\n\t\t\twillSavedSong.filename = removeTagFromFilename(willSavedSong.filename)\n\t\t\tif(original === CONSTANT.musicOriginal.savedSongs){\n\t\t\t\tmusicDataListCopy.push(willSavedSong)\n\t\t\t}\n\t\t\tif(original === CONSTANT.musicOriginal.musicFinished){\n\t\t\t\twillSavedSong.filePath = willSavedSong.fileUrl\n\t\t\t\tdelete willSavedSong.fileUrl\n\t\t\t}\n\t\t\tdelete willSavedSong.getNewestPath\n\t\t\tmusicCollectionCopy.push(willSavedSong)\n\t\t}\n\t\tconst dataObj = {\n\t\t\tusername: username || setMobile,\n\t\t\ttoken,\n\t\t\tmusicCollection: musicCollectionCopy\n\t\t}\n\t\treturn axios.post(HTTP_URL.saveSong, dataObj)\n\t\t\t.then((result) => {\n\t\t\t\tif (result.data.result.result === 'success') {\n\t\t\t\t\tcheckSongSavedFunc(musicDataList, original)\n\t\t\t\t\t$dispatch(updateToken(result.data.result.token))\n\t\t\t\t\tmusicCollectionCopy.forEach(item => {\n\t\t\t\t\t\tdelete item.saved\n\t\t\t\t\t})\n\t\t\t\t\t$dispatch(updateMusicCollection(musicCollectionCopy))\n\t\t\t\t\tconst currentMusicInfo = JSON.parse(JSON.stringify(musicDataList[currentFileIndex]))\n\t\t\t\t\tcurrentMusicInfo.filename = removeTagFromFilename(currentMusicInfo.filename)\n\t\t\t\t\tconst { currentPlayingSong } = $getState().fileServer\n\t\t\t\t\tif (hasSaved !== -1) {\n\t\t\t\t\t\tdelete  currentMusicInfo.saved\n\t\t\t\t\t\tif(removePrefixFromFileOrigin(currentPlayingSong) === removePrefixFromFileOrigin(currentMusicInfo.filenameOrigin)){\n\t\t\t\t\t\t\t$dispatch(updateCurrentMusicItemInfo(currentMusicInfo))\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmusicDataListCopy.some(item => {\n\t\t\t\t\t\t\tif(removePrefixFromFileOrigin(item.filenameOrigin) === removePrefixFromFileOrigin(filenameOrigin)){\n\t\t\t\t\t\t\t\tdelete item.saved\n\t\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t$dispatch(updateCurrentPlayingMusicList(musicDataListCopy))\n\t\t\t\t\t\talert('取消收藏成功')\n\t\t\t\t\t\tif(pageType === CONSTANT.musicOriginal.savedSongs){\n\t\t\t\t\t\t\tconst currentMusicFilenameOriginalArr = musicCollectionCopy.map(item => item.filenameOrigin)\n\t\t\t\t\t\t\tdealPlayAfterRemove(currentFileIndex, currentMusicFilenameOriginalArr, original, musicDataListCopy)\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn false\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcurrentMusicInfo.saved = true\n\t\t\t\t\t\tif(removePrefixFromFileOrigin(currentPlayingSong) === removePrefixFromFileOrigin(currentMusicInfo.filenameOrigin)){\n\t\t\t\t\t\t\t$dispatch(updateCurrentMusicItemInfo(currentMusicInfo))\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmusicDataListCopy.some(item => {\n\t\t\t\t\t\t\tif(removePrefixFromFileOrigin(item.filenameOrigin) === removePrefixFromFileOrigin(filenameOrigin)){\n\t\t\t\t\t\t\t\titem.saved = true\n\t\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t$dispatch(updateCurrentPlayingMusicList(musicDataListCopy))\n\t\t\t\t\t\talert('收藏成功')\n\t\t\t\t\t\treturn true\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlogger.error(\"HTTP_URL.saveSong result not success\", result)\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tlogger.error(\"HTTP_URL.saveSong err\", err)\n\t\t\t\tnetworkErr(err, `saveSong dataObj: ${dataObj}`);\n\t\t\t})\n\t} catch(err){\n\t\tlogger.error(\"saveSongFunc err\", err)\n\t}\n}\n\nexport const playPreviousSong = (currentFileIndex, currentMusicFilenameOriginalArr, original, musicDataList, e) => {\n\tif(e) e.stopPropagation();\n\tif(currentFileIndex === null){\n\t\treturn alert('请选择一首歌播放')\n\t}\n\tif(!currentFileIndex){\n\t\tcurrentFileIndex = currentMusicFilenameOriginalArr.length\n\t}\n\tcurrentFileIndex--\n\tconst previousSongInfo = musicDataList[currentFileIndex]\n\treturn playAnotherSong(previousSongInfo, original, musicDataList, null, {type: 'playPreviousSong', currentFileIndex, currentMusicFilenameOriginalArr})\n}\n\nexport const playNextSong = (currentFileIndex, currentMusicFilenameOriginalArr, original, musicDataList, e) => {\n\tif(e) e.stopPropagation();\n\tif(currentFileIndex === null){\n\t\treturn alert('请选择一首歌播放')\n\t}\n\tif(currentFileIndex === (currentMusicFilenameOriginalArr.length - 1)){\n\t\tcurrentFileIndex = -1\n\t}\n\tcurrentFileIndex++\n\tconst nextSongInfo = musicDataList[currentFileIndex]\n\treturn playAnotherSong(nextSongInfo, original, musicDataList, null, {type: 'playNextSong', currentFileIndex, currentMusicFilenameOriginalArr})\n}\n\nlet retryTime=0\nexport const getMusicCurrentPlayProcess = (retry) => {\n\tclearInterval(window.currentTimeInterval)\n\tlet lastMusicSeekTime = 0\n\tif(retry) {\n\t\tretryTime++\n\t} else {\n\t\tretryTime=0\n\t}\n\twindow.currentTimeInterval = setInterval(() => {\n\t\ttry {\n\t\t\tconst { soundInstance } = $getState().fileServer\n\t\t\tsetTimeout(() => {\n\t\t\t\tif(soundInstance && typeof(soundInstance.seek) === \"function\" && typeof(soundInstance.seek()) === \"number\" && soundInstance.seek() !== NaN && soundInstance.seek() !== 0){\n\t\t\t\t\tconst currentMusicSeekTime = soundInstance.seek()\n\t\t\t\t\tif(lastMusicSeekTime !== currentMusicSeekTime){\n\t\t\t\t\t\tmusicPlayingProgressFunc()\n\t\t\t\t\t\t$dispatch(updateCurrentSongTime(currentMusicSeekTime))\n\t\t\t\t\t\tlastMusicSeekTime = currentMusicSeekTime\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, 50)\n\t\t} catch(err){\n\t\t\talertDebug(`soundInstance.seek() er ${err.stack || err.toString()}`)\n\t\t\tif(retryTime >= 6){\n\t\t\t\tretryTime=0\n\t\t\t\tclearInterval(window.currentTimeInterval)\n\t\t\t} else {\n\t\t\t\tgetMusicCurrentPlayProcess(true)\n\t\t\t}\n\t\t\tlogger.warn(\"checkStatus soundInstance.seek() err\", err.stack || err.toString())\n\t\t}\n\t}, 1000)\n}\n\nexport const musicPlayingProgressFunc = () => {\n\tconst { currentPlayingSongDuration, currentSongTime, currentMusicItemInfo } = $getState().fileServer\n\tif(!currentPlayingSongDuration || currentPlayingSongDuration === NaN || !window.circleControlRef) return\n\tif (window.circleControlRef.style.strokeDashoffset > 0) {\n\t\tconst percent = (currentSongTime / currentMusicItemInfo.duration)\n\t\twindow.circleControlRef.style.strokeDashoffset = (CONSTANT.strokeDashoffset * (1 - percent))\n\t} else {\n\t\twindow.circleControlRef.style.strokeDashoffset = 314\n\t}\n}\n\nexport const pauseMusic = () => {\n\tconst { soundInstance, soundInstanceId, currentPlayingSong } = $getState().fileServer\n\tlogger.info(\"music pause currentPlayingSong\", currentPlayingSong)\n\tif(soundInstance && soundInstanceId) {\n\t\tsoundInstance.pause(soundInstanceId);\n\t}\n\t$dispatch(updateSoundPlaying(false))\n}\n\nexport const resumeMusic = () => {\n\tconst { soundInstance, soundInstanceId, currentPlayingSong } = $getState().fileServer\n\tlogger.info(\"music resume currentPlayingSong\", currentPlayingSong)\n\tif(soundInstance && soundInstanceId) {\n\t\tsoundInstance.play(soundInstanceId)\n\t\t$dispatch(updateSoundPlaying(true))\n\t} else {\n\t\ttry {\n\t\t\tconst { pauseWhenOver } = $getState().fileServer;\n\t\t\tconst lastPlaySongInfo = JSON.parse(localStorage.getItem('lastPlaySongInfo')) || {}\n\t\t\tconst lastPlaySongMusicDataList = JSON.parse(localStorage.getItem('lastPlaySongMusicDataList')) || []\n\t\t\tconst filePath = localStorage.getItem('filePath')\n\t\t\t$dispatch(updateSoundPlaying(true))\n\t\t\tmusicHowlPlay(filePath || lastPlaySongInfo.filePath, pauseWhenOver, lastPlaySongMusicDataList, lastPlaySongInfo.filenameOrigin, lastPlaySongInfo.original, true, false)\n\t\t} catch(err){\n\t\t\tlogger.error(\"resumeMusic err\", err)\n\t\t\tstopMusic()\n\t\t}\n\t}\n}\n\nexport const stopMusic = () => {\n\tconst { soundInstance, soundInstanceId, currentPlayingSong } = $getState().fileServer\n\tlogger.info(\"music stop currentPlayingSong\", currentPlayingSong)\n\tif(soundInstance && soundInstanceId) {\n\t\tsoundInstance.stop(soundInstanceId)\n\t\tsoundInstance.unload()\n\t}\n\t$dispatch(updateSoundPlaying(false))\n\t$dispatch(updateCurrentSongTime(0))\n\t$dispatch(updateSoundInstance(null))\n\t$dispatch(updateSoundInstanceId(null))\n\t$dispatch(updateCurrentPlayingSong(null))\n\t$dispatch(updateMusicPageType(\"\"))\n\t$dispatch(updateCurrentPlayingSongOriginal(\"\"))\n\t$dispatch(updateCurrentPlayingSongDuration(\"\"))\n\t$dispatch(updateCurrentPlayingMusicList([]))\n\t$dispatch(updateCurrentMusicItemInfo({}))\n\tlocalStorage.removeItem('lastPlaySongInfo')\n\tlocalStorage.removeItem('lastPlaySongPageType')\n\tlocalStorage.removeItem('lastPlaySongMusicDataList')\n\tif(window.circleControlRef){\n\t\twindow.circleControlRef.style.strokeDashoffset = CONSTANT.strokeDashoffset\n\t\twindow.circleControlRef.style.strokeWidth = \"8px\"\n\t}\n}\n\nexport const playMusic = async ({\n\tfilePath,\n\tfilenameOrigin,\n\tduration,\n\toriginal,\n\tmusicDataList,\n\tpageType,\n\tfilename,\n\tmusicId,\n\tsongOriginal,\n\tcheckLastMusicWhenLaunch=false,\n\tsongInfo={}\n}) => {\n\ttry {\n\t\tif(songInfo.filename) {\n\t\t\tsongInfo.filename = removeTagFromFilename(songInfo.filename)\n\t\t\t$dispatch(updateCurrentMusicItemInfo(songInfo))\n\t\t}\n\t\tconst notFirstTimePlayMusic = localStorage.getItem(\"notFirstTimePlayMusic\")\n\t\tif(!notFirstTimePlayMusic && !checkLastMusicWhenLaunch && window.isCordova && !window.isDevModel){\n\t\t\tlocalStorage.setItem(\"notFirstTimePlayMusic\", true)\n\t\t\talertDialog(\"音乐置于后台播放时，为了应用不被系统省电杀掉，状态栏会出现消息提示\", \"\", \"我知道了\")\n\t\t}\n\t\tconst { pauseWhenOver, recentMusicList } = $getState().fileServer;\n\t\tlet currentMusicItem=songInfo, isLocalDownloadedMusicPath = filePath ? filePath.includes(\"cdvfile://localhost/sdcard/miXingFeng/music/\") : false\n\t\tif(isLocalDownloadedMusicPath){\n\t\t\t// 检查已下载的音乐是否被删除\n\t\t\tconst fileExist = await checkFileExistOrNot(removePrefixFromFileOrigin(filenameOrigin), \"music\")\n\t\t\tif(!fileExist) {\n\t\t\t\talertDialog(`${filename}已被删除`)\n\t\t\t\tlogger.warn(\"playMusic 已被删除 filePath, filenameOrigin\", filePath, filenameOrigin)\n\t\t\t\t// 移除已下载的音乐\n\t\t\t\tremoveFileFromDownload(removePrefixFromFileOrigin(filenameOrigin), \"music\")\n\t\t\t\t// 移除最近列表的音乐\n\t\t\t\tlet currentItemIndex = -1\n\t\t\t\trecentMusicList.some((item, index) => {\n\t\t\t\t\tif(item.filenameOrigin === filenameOrigin){\n\t\t\t\t\t\tcurrentItemIndex = index;\n\t\t\t\t\t\treturn true\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\tif(currentItemIndex !== -1){\n\t\t\t\t\tconst recentMusicListCopy = JSON.parse(JSON.stringify(recentMusicList))\n\t\t\t\t\trecentMusicListCopy.splice(currentItemIndex, 1)\n\t\t\t\t\t$dispatch(updateRecentMusicList(recentMusicListCopy))\n\t\t\t\t\tremoveRecentMusicDataByIndexFromIndexDB(filenameOrigin)\n\t\t\t\t}\n\t\t\t\treturn\n\t\t\t}\n\t\t\tfilePath = removePrefixFromFileOrigin(filePath)\n\t\t}\n\t\tmusicDataList = removeDuplicateObjectList(musicDataList, 'filenameOrigin')\n\t\tlogger.info(\"playMusic music play filenameOrigin\", filenameOrigin)\n\t\t// 为了减少刷新,这里不要调用stopMuisc方法\n\t\tconst { soundInstance, soundInstanceId, currentPlayingSong } = $getState().fileServer\n\t\tlogger.info(\"music stop currentPlayingSong\", currentPlayingSong)\n\t\tif(soundInstance && soundInstanceId) {\n\t\t\tsoundInstance.stop(soundInstanceId)\n\t\t\tsoundInstance.unload()\n\t\t}\n\t\t$dispatch(updateCurrentSongTime(0))\n\t\tif(musicDataList && musicDataList.length) $dispatch(updateCurrentPlayingMusicList(musicDataList))\n\t\tif(!checkLastMusicWhenLaunch) $dispatch(updateSoundPlaying(true))\n\t\t$dispatch(updateCurrentPlayingSong(filenameOrigin))\n\t\t$dispatch(updateCurrentPlayingSongDuration(duration))\n\t\t$dispatch(updateCurrentPlayingSongOriginal(original))   //音乐源是什么,比如网易云,qq音乐\n\t\tif(pageType) $dispatch(updateMusicPageType(pageType))  \t//是在哪个页面播放的,比如全局搜索,搜藏页面\n\t\tif(!isLocalDownloadedMusicPath){\n\t\t\t// 检查是否需要获取或重新获取音乐链接\n\t\t\tlet needGetNewestPath = true\n\t\t\tif(!checkLastMusicWhenLaunch){\n\t\t\t\tmusicDataList.some((item) => {\n\t\t\t\t\tif(removePrefixFromFileOrigin(item.filenameOrigin) === removePrefixFromFileOrigin(filenameOrigin)){\n\t\t\t\t\t\tif(!currentMusicItem.filename){\n\t\t\t\t\t\t\tcurrentMusicItem = JSON.parse(JSON.stringify(item));\n\t\t\t\t\t\t\t$dispatch(updateCurrentMusicItemInfo(currentMusicItem))\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(item.getNewestPath){\n\t\t\t\t\t\t\tneedGetNewestPath = false\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t\tif(needGetNewestPath || songOriginal === CONSTANT.musicOriginal.netEaseCloud){\n\t\t\t\tfilePath = await checkFilePath(filePath, songOriginal, musicId, musicDataList, filenameOrigin, checkLastMusicWhenLaunch)\n\t\t\t\tif(!filePath) {\n\t\t\t\t\tif(!checkLastMusicWhenLaunch) checkSongSavedFunc([currentMusicItem], \"usedForControllerAndPlatingPage\")\n\t\t\t\t\tif(currentMusicItem.filename) $dispatch(updateCurrentMusicItemInfo(currentMusicItem))\n\t\t\t\t\treturn\n\t\t\t\t} else {\n\t\t\t\t\tcurrentMusicItem.filePath = filePath\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// 已下载的音乐的链接在本地，这里只需把音乐记录保存下即可\n\t\t\tmusicDataList.some((item) => {\n\t\t\t\tif(removePrefixFromFileOrigin(item.filenameOrigin) === removePrefixFromFileOrigin(filenameOrigin)){\n\t\t\t\t\tcurrentMusicItem = JSON.parse(JSON.stringify(item));\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t\tif(!checkLastMusicWhenLaunch) checkSongSavedFunc([currentMusicItem], \"usedForControllerAndPlatingPage\")\n\t\tif(currentMusicItem.filename && !checkLastMusicWhenLaunch && window.location.href.split(\"?\").length === 1){\n\t\t\t// 记住正在播放的音乐,便于下次启动app显示上次播放的音乐\n\t\t\tconst currentMusicItem2 = JSON.parse(JSON.stringify(currentMusicItem))\n\t\t\tconst musicDataListCopy = JSON.parse(JSON.stringify(musicDataList))\n\t\t\tdelete currentMusicItem2.getNewestPath\n\t\t\tif(pageType === CONSTANT.musicOriginal.savedSongs){\n\t\t\t\tcurrentMusicItem2.saved = true\n\t\t\t\tmusicDataListCopy.forEach(item => {\n\t\t\t\t\tdelete item.getNewestPath\n\t\t\t\t\titem.saved = true\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\tmusicDataListCopy.forEach(item => {\n\t\t\t\t\tdelete item.getNewestPath\n\t\t\t\t})\n\t\t\t}\n\t\t\tlocalStorage.setItem('lastPlaySongInfo', JSON.stringify(currentMusicItem2))\n\t\t\tlocalStorage.setItem('lastPlaySongPageType', pageType)\n\t\t\tlocalStorage.setItem('lastPlaySongMusicDataList', JSON.stringify(musicDataListCopy))\n\t\t\t// 播放记录\n\t\t\tlet currentMusicItemCopy = JSON.parse(JSON.stringify(currentMusicItem))\n\t\t\tconst recentMusicListCopy = JSON.parse(JSON.stringify(recentMusicList))\n\t\t\tcurrentMusicItemCopy.date = Date.now()\n\t\t\tif(recentMusicList.length){\n\t\t\t\tif(removePrefixFromFileOrigin(recentMusicList[0]['filenameOrigin']) === removePrefixFromFileOrigin(filenameOrigin) && recentMusicList[0]['original'] === songOriginal){\n\t\t\t\t\tlogger.info(\"playMusic onload same song filenameOrigin, songOriginal, pauseWhenOver\", filenameOrigin, songOriginal, pauseWhenOver)\n\t\t\t\t} else {\n\t\t\t\t\tif(pageType !== CONSTANT.musicOriginal.musicRecent){\n\t\t\t\t\t\tcurrentMusicItemCopy.filenameOrigin = (\"recent_\" + currentMusicItem.filenameOrigin)\n\t\t\t\t\t\tlet reduplicateItemIndex, needInsertNewOne = true\n\t\t\t\t\t\trecentMusicList.some((item, index) => {\n\t\t\t\t\t\t\tif(removePrefixFromFileOrigin(item.filenameOrigin) === removePrefixFromFileOrigin(currentMusicItem.filenameOrigin)){\n\t\t\t\t\t\t\t\treduplicateItemIndex = index\n\t\t\t\t\t\t\t\tneedInsertNewOne = false\n\t\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\tif(!needInsertNewOne){\n\t\t\t\t\t\t\trecentMusicListCopy.splice(reduplicateItemIndex, 1)\n\t\t\t\t\t\t\trecentMusicListCopy.unshift(currentMusicItemCopy)\n\t\t\t\t\t\t\tremoveRecentMusicDataByIndexFromIndexDB(currentMusicItemCopy.filenameOrigin)\n\t\t\t\t\t\t\tdelete currentMusicItemCopy.getNewestPath\n\t\t\t\t\t\t\taddRecentMusicDataFromIndexDB(currentMusicItemCopy)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\trecentMusicListCopy.unshift(currentMusicItemCopy)\n\t\t\t\t\t\t\tdelete currentMusicItemCopy.getNewestPath\n\t\t\t\t\t\t\taddRecentMusicDataFromIndexDB(currentMusicItemCopy)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcurrentMusicItemCopy.filenameOrigin = (\"recent_\" + currentMusicItem.filenameOrigin)\n\t\t\t\tdelete currentMusicItemCopy.getNewestPath\n\t\t\t\taddRecentMusicDataFromIndexDB(currentMusicItemCopy)\n\t\t\t\trecentMusicListCopy.unshift(currentMusicItemCopy)\n\t\t\t}\n\t\t\t$dispatch(updateRecentMusicList(recentMusicListCopy))\n\t\t}\n\t\tif(!checkLastMusicWhenLaunch){\n\t\t\tawait musicHowlPlay(filePath, pauseWhenOver, musicDataList, filenameOrigin, original, isLocalDownloadedMusicPath, checkLastMusicWhenLaunch)\n\t\t} else {\n\t\t\tlocalStorage.setItem('filePath', filePath)\n\t\t}\n\t\tif(window.circleControlRef){\n\t\t\twindow.circleControlRef.style.strokeDashoffset = CONSTANT.strokeDashoffset\n\t\t\twindow.circleControlRef.style.strokeWidth = \"8px\"\n\t\t}\n\t} catch(err){\n\t\tlogger.error(\"play() fail err\", err && err.stack || err.toString())\n\t\tstopMusic()\n\t\talert('播放失败')\n\t}\n}\n\nwindow.platSongNumber = 0;\nconst musicPlayQueue = []\nfunction platSongNumberFunc(){\n\tif(window.platSongNumberTimer) clearTimeout(window.platSongNumberTimer)\n\twindow.platSongNumberTimer = setTimeout(() => {\n\t\twindow.platSongNumber = 0\n\t}, 1500)\n}\nasync function musicHowlPlay(filePath, pauseWhenOver, musicDataList=[], filenameOrigin, original, isLocalDownloadedMusicPath, checkLastMusicWhenLaunch=false){\n\tif(!isLocalDownloadedMusicPath){\n\t\t// 屏蔽快速切换音乐的情况,如果连续点击两首，不屏蔽，超过两首屏蔽\n\t\t// 清除屏蔽计数\n\t\tplatSongNumberFunc()\n\t\tif(window.platSongNumber >= 2){\n\t\t\twindow.platSongNumber++\n\t\t\tmusicPlayQueue.push(filenameOrigin)\n\t\t\tawait sleep(1500)\n\t\t} else {\n\t\t\twindow.platSongNumber++\n\t\t}\n\t\tif(musicPlayQueue.length === 1){\n\t\t\tmusicPlayQueue.length = 0;\n\t\t} else if(musicPlayQueue.length >= 2){\n\t\t\tlogger.info(\"musicHowlPlay cancel unnecessary song playing filenameOrigin\", filenameOrigin)\n\t\t\tmusicPlayQueue.shift()\n\t\t\treturn\n\t\t}\n\t}\n\tlogger.info(\"musicHowlPlay filePath\", filePath)\n\tconst soundInstanceModel = new Howl({\n\t\tsrc: [filePath],\n\t\tloop: !pauseWhenOver,\n\t\trate: 1.0,\n\t\thtml5: true,\n\t\tonloaderror: function(id, error){\n\t\t\tlogger.error(\"playMusic onloaderror error \", error)\n\t\t\tlogger.error(\"play music err filePath, filenameOrigin, original\", filePath, filenameOrigin, original)\n\t\t\tstopMusic()\n\t\t\tmusicDataList.some((item) => {\n\t\t\t\tif(removePrefixFromFileOrigin(item.filenameOrigin) === removePrefixFromFileOrigin(filenameOrigin)){\n\t\t\t\t\tdelete item.getNewestPath\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t})\n\t\t\tif(!checkLastMusicWhenLaunch){ //只有刚启动app获取上一次播放音乐的时候才没有self\n\t\t\t\talertDialog(\"音乐播放异常,请尝试其他音乐\")\n\t\t\t}\n\t\t},\n\t\tonend: function() {\n\t\t\tconst { pauseWhenOver, playByOrder, playByRandom } = $getState().fileServer;\n\t\t\tlogger.info(\"onend pauseWhenOver, playByOrder, playByRandom\", pauseWhenOver, playByOrder, playByRandom)\n\t\t\tmusicPlayingProgressFunc()\n\t\t\tif(playByOrder){\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tif(musicDataList.length) {\n\t\t\t\t\t\tautoPlayNextOne(\"playByOrder\", filenameOrigin, musicDataList, original)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpauseMusic()\n\t\t\t\t\t\t$dispatch(updateCurrentSongTime(0))\n\t\t\t\t\t}\n\t\t\t\t}, 1500)\n\t\t\t} else if(playByRandom){\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tif(musicDataList.length) {\n\t\t\t\t\t\tautoPlayNextOne(\"playByRandom\", filenameOrigin, musicDataList, original)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpauseMusic()\n\t\t\t\t\t\t$dispatch(updateCurrentSongTime(0))\n\t\t\t\t\t}\n\t\t\t\t}, 1500)\n\t\t\t} else if(pauseWhenOver){\n\t\t\t\t$dispatch(updateSoundPlaying(false))\n\t\t\t\tclearInterval(window.currentTimeInterval)\n\t\t\t}\n\t\t}\n\t});\n\tconst soundInstanceModelId = soundInstanceModel.play();\n\t$dispatch(updateSoundInstance(soundInstanceModel))\n\t$dispatch(updateSoundInstanceId(soundInstanceModelId))\n\tgetMusicCurrentPlayProcess(false)\n}\n\nexport const sleep = (t) => {\n\treturn new Promise(res => {\n\t\tsetTimeout(res, t)\n\t})\n}\n\nexport const autoPlayNextOne = (type, filenameOrigin, musicDataList, original) => {\n\ttry {\n\t\tconst currentMusicFilenameOriginalArr = musicDataList.map(item => item.filenameOrigin)\n\t\tlet currentFileIndex = currentMusicFilenameOriginalArr.indexOf(filenameOrigin)\n\t\tif(currentFileIndex === (currentMusicFilenameOriginalArr.length - 1)){\n\t\t\tcurrentFileIndex = -1\n\t\t}\n\t\tcurrentFileIndex++\n\t\tlogger.info(\"autoPlayNextOne filenameOrigin\", filenameOrigin, 'type', type)\n\t\tif(type === \"playByRandom\" && currentMusicFilenameOriginalArr.length !== 1){\n\t\t\tcurrentFileIndex = getRandomFileIndex(currentMusicFilenameOriginalArr, currentFileIndex)\n\t\t}\n\t\tconst nextSongInfo = musicDataList[currentFileIndex]\n\t\tplayAnotherSong(nextSongInfo, original, musicDataList, type, null)\n\t} catch(err){\n\t\talertDialog(\"音乐文件异常, 暂停播放\");\n\t\tlogger.error(\"autoPlayNextOne play onEnd err\", err)\n\t}\n}\n\nfunction playAnotherSong(anotherSongInfo, original, musicDataList, type, others){\n\t$dispatch(updateCurrentSongTime(0))\n\tif(anotherSongInfo.payPlay) {\n\t\talert(\"尊重版权,人人有责\")\n\t\tlogger.info(\"playAnotherSong 尊重版权,人人有责 anotherSongInfo\", anotherSongInfo)\n\t\tif(type){\n\t\t\treturn autoPlayNextOne(type, anotherSongInfo.filenameOrigin, musicDataList, original)\n\t\t} else if(others){\n\t\t\tif(others.type === \"playPreviousSong\"){\n\t\t\t\treturn playPreviousSong(others.currentFileIndex, others.currentMusicFilenameOriginalArr, original, musicDataList, null)\n\t\t\t} else if(others.type === \"playNextSong\"){\n\t\t\t\treturn playNextSong(others.currentFileIndex, others.currentMusicFilenameOriginalArr, original, musicDataList, null)\n\t\t\t}\n\t\t}\n\t} else {\n\t\tplayMusic({\n\t\t\tfilePath: anotherSongInfo.filePath,\n\t\t\tfilenameOrigin: anotherSongInfo.filenameOrigin,\n\t\t\tduration: anotherSongInfo.duration,\n\t\t\toriginal,\n\t\t\tmusicDataList,\n\t\t\tpageType: $getState().fileServer.musicPageType,\n\t\t\tfilename: anotherSongInfo.filename,\n\t\t\tmusicId: anotherSongInfo.id,\n\t\t\tsongOriginal: anotherSongInfo.original,\n\t\t\tsongInfo: anotherSongInfo\n\t\t})\n\t}\n}\n\nexport const getRandomFileIndex = (currentMusicFilenameOriginalArr, currentFileIndex) => {\n\tconst randomFileIndex = parseInt(Math.random() * currentMusicFilenameOriginalArr.length)\n\tif(currentFileIndex === randomFileIndex){\n\t\tlogger.warn(\"getRandomFileIndex repeat randomFileIndex\", randomFileIndex, 'currentFileIndex', currentFileIndex)\n\t\treturn getRandomFileIndex(currentMusicFilenameOriginalArr, currentFileIndex)\n\t} else {\n\t\tlogger.info(\"getRandomFileIndex randomFileIndex\", randomFileIndex)\n\t\treturn randomFileIndex\n\t}\n}\n\nexport const checkStatus = ({\n\t\tfilePath,\n\t\tfilename,\n\t\tfilenameOrigin,\n\t\tuploadUsername,\n\t\tfileSize,\n\t\tduration,\n\t\tsongOriginal,\n\t\toriginal,\n\t\tmusicDataList,\n\t\tpageType,\n\t\tpayPlay,\n\t\tmusicId,\n\t\tsongInfo\n\t}) => {\n\ttry {\n\t\tif(payPlay) return alert(\"尊重版权,人人有责\")\n\t\tconst { token } = $getState().login\n\t\tif(!token && pageType !== CONSTANT.musicOriginal.musicShare){\n\t\t\treturn window.goRoute(null, \"/login\")\n\t\t}\n\t\tconst { soundPlaying, currentPlayingSong, downloadingMusicItems, soundInstance } = $getState().fileServer;\n\t\tif(original === CONSTANT.musicOriginal.musicDownloading){\n\t\t\tdownloadingMusicItems.some((item) => {\n\t\t\t\tif(item.filenameOrigin === filenameOrigin) {\n\t\t\t\t\tlogger.info(\"checkStatus musicDownloading filenameOrigin\", filenameOrigin)\n\t\t\t\t\tfilenameOrigin = removePrefixFromFileOrigin(filenameOrigin)\n\t\t\t\t\tif(item.progress === \"失败\" || item.progress === \"已取消\"){\n\t\t\t\t\t\talert(`重新下载${filename}`)\n\t\t\t\t\t\tlogger.info(\"checkStatus 重新下载 item.progress, filenameOrigin\", item.progress, filenameOrigin)\n\t\t\t\t\t\tupdateDownloadingStatus(filename, '准备中', uploadUsername, fileSize, true, filePath, filenameOrigin, true, {duration})\n\t\t\t\t\t\tsaveFileToLocal({\n\t\t\t\t\t\t\tfilenameOrigin,\n\t\t\t\t\t\t\tfileUrl: filePath,\n\t\t\t\t\t\t\tfolder: \"music\",\n\t\t\t\t\t\t\tfilename,\n\t\t\t\t\t\t\tuploadUsername,\n\t\t\t\t\t\t\tneedSaveToDownloadBox: true,\n\t\t\t\t\t\t\tfileSize,\n\t\t\t\t\t\t\tfromMusic: true,\n\t\t\t\t\t\t\toptions: {duration, songOriginal}\n\t\t\t\t\t\t})\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlogger.info(\"checkStatus abort download filenameOrigin\", filenameOrigin)\n\t\t\t\t\t\twindow.eventEmit.$emit(`FileTransfer-${filenameOrigin}`, 'abort')\n\t\t\t\t\t}\n\t\t\t\t\treturn true\n\t\t\t\t} else {\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t})\n\t\t\treturn\n\t\t}\n\t\tif(soundInstance) getMusicCurrentPlayProcess(false)\n\t\tlogger.info(\"music checkStatus currentPlayingSong, soundPlaying, filenameOrigin\", currentPlayingSong, soundPlaying, filenameOrigin)\n\t\tif(!soundPlaying){\n\t\t\tif(!currentPlayingSong){\n\t\t\t\t// first play case\n\t\t\t\tplayMusic({ filePath, filenameOrigin, duration, original, musicDataList, pageType, filename, musicId, songOriginal, songInfo })\n\t\t\t} else {\n\t\t\t\t// pause case\n\t\t\t\tif(filenameOrigin === currentPlayingSong){\n\t\t\t\t\tresumeMusic()\n\t\t\t\t} else {\n\t\t\t\t\t// stop current song and switch to another song case and then initial play current time\n\t\t\t\t\tplayMusic({ filePath, filenameOrigin, duration, original, musicDataList, pageType, filename, musicId, songOriginal, songInfo })\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif(filenameOrigin !== currentPlayingSong){\n\t\t\t\t// stop current song and switch to another song case and initial play current time\n\t\t\t\tplayMusic({ filePath, filenameOrigin, duration, original, musicDataList, pageType, filename, musicId, songOriginal, songInfo })\n\t\t\t} else {\n\t\t\t\t// pause current song\n\t\t\t\tpauseMusic()\n\t\t\t}\n\t\t}\n\t} catch (err){\n\t\tlogger.error(\"checkStatus err\", err)\n\t}\n}\n\nexport const checkToShowPlayController = () => {\n\tsetTimeout(() => {\n\t\tconst urlHash =  window.getRoute()\n\t\tconst arr = [\"/search_music\", \"/search_online_music\", \"/search_all\", \"/saved_songs\", \"/my_finished_musics\", \"/recent_music_played\"]\n\t\tlet needDisplay = false\n\t\tif(urlHash){\n\t\t\tarr.forEach(item => {\n\t\t\t\tif(item === urlHash){\n\t\t\t\t\tneedDisplay = true\n\t\t\t\t}\n\t\t\t})\n\t\t\tif(needDisplay){\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tdocument.querySelector(\"#root .container .main-content\").style.height = \"calc(100vh - 66px)\"\n\t\t\t\t\twindow.musicControllerRef && window.musicControllerRef.current.style && (window.musicControllerRef.current.style.display = \"flex\")\n\t\t\t\t}, 100)\n\t\t\t} else {\n\t\t\t\thideMusicController()\n\t\t\t}\n\t\t} else {\n\t\t\thideMusicController()\n\t\t}\n\t})\n}\n\nexport const checkFileExistOrNot = (filenameOrigin, folder) => {\n\treturn new Promise(function (res) {\n\t\twindow.requestFileSystem(window.LocalFileSystem.PERSISTENT, 0, function (fs) {\n\t\t\tfs.root.getDirectory('miXingFeng', {\n\t\t\t\tcreate: true\n\t\t\t}, function (dirEntry) {\n\t\t\t\tdirEntry.getDirectory(folder, {\n\t\t\t\t\tcreate: true\n\t\t\t\t}, function (subDirEntry) {\n\t\t\t\t\t//持久化数据保存\n\t\t\t\t\tsubDirEntry.getFile(\n\t\t\t\t\t\tfilenameOrigin, {create: false, exclusive: true},\n\t\t\t\t\t\tfunction (fileEntry) {\n\t\t\t\t\t\t\tlogger.info(\"checkFileExistOrNot file is already exist, filenameOrigin\", filenameOrigin)\n\t\t\t\t\t\t\tres(true)\n\t\t\t\t\t\t}, () => {\n\t\t\t\t\t\t\tlogger.info(\"checkFileExistOrNot file is not exist at all, filenameOrigin\", filenameOrigin)\n\t\t\t\t\t\t\tres(false)\n\t\t\t\t\t\t});\n\t\t\t\t}, (err) => {logger.error(\"checkFileExistOrNot load file fail\", err); res(false)});\n\t\t\t}, (err) => {logger.error(\"checkFileExistOrNot load file directory fail\", err); res(false)});\n\t\t}, (err) => {logger.error(\"checkFileExistOrNot load file system fail\", err); res(false)});\n\t})\n}\n\nexport const checkExternalFileExistOrNot = (filename) => {\n\treturn new Promise((resolve) => {\n\t\twindow.resolveLocalFileSystemURL(\n\t\t\twindow.cordova.file.externalApplicationStorageDirectory,\n\t\t\tfunction (fs) {\n\t\t\t\tfs.getFile(\n\t\t\t\t\tfilename,\n\t\t\t\t\t{create: false,exclusive: true},\n\t\t\t\t\tfunction (fileEntry) {\n\t\t\t\t\t\tresolve(true)\n\t\t\t\t\t},\n\t\t\t\t\tfunction(error){\n\t\t\t\t\t\tresolve(false)\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t)\n\t})\n}\n\nexport const checkFilePath = async (filePath, songOriginal, musicId, musicDataList, filenameOrigin, checkLastMusicWhenLaunch=false) => {\n\tlet getFilePath = \"\"\n\tswitch(songOriginal){\n\t\tcase CONSTANT.musicOriginal.netEaseCloud:\n\t\t\tgetFilePath = HTTP_URL.getNetEaseCloudMusicLinksByIds\n\t\t\tbreak;\n\t\tcase CONSTANT.musicOriginal.qqMusic:\n\t\t\tgetFilePath = HTTP_URL.getQQMusicLinksByIds\n\t\t\tbreak;\n\t\tcase CONSTANT.musicOriginal.kuGouMusic:\n\t\t\tgetFilePath = HTTP_URL.getKuGouMusicLinksByIds\n\t\t\tbreak;\n\t\tcase CONSTANT.musicOriginal.kuWoMusic:\n\t\t\tgetFilePath = HTTP_URL.getKuWoMusicLinksByIds\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t}\n\tlogger.info(\"checkFilePath songOriginal, getFilePath\", songOriginal, getFilePath)\n\tif(getFilePath){\n\t\tconst result = await axios.post(getFilePath, { ids: [musicId] })\n\t\t\t.catch(err => {\n\t\t\t\treturn networkErr(err, `checkFilePath getFilePath: ${getFilePath} musicId: ${musicId}`);\n\t\t\t})\n\t\tconst response = result && result.data && result.data.result && result.data.result.response || {}\n\t\tlogger.info(\"checkFilePath axios getFilePath response\", response)\n\t\tfilePath = response.filePath\n\t\tif(filePath){\n\t\t\t// 下面会直接改变redux里的数据\n\t\t\tfor(let item of musicDataList){\n\t\t\t\tif(removePrefixFromFileOrigin(item.filenameOrigin) === removePrefixFromFileOrigin(filenameOrigin)){\n\t\t\t\t\titem.filePath = filePath\n\t\t\t\t\titem.getNewestPath = true\n\t\t\t\t\tif(songOriginal === CONSTANT.musicOriginal.netEaseCloud){\n\t\t\t\t\t\titem.fileSize = response.fileSize\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn filePath\n\t\t} else {\n\t\t\tlogger.warn(\"get no filePath songOriginal, musicId, response\", songOriginal, musicId, response)\n\t\t\tif(!checkLastMusicWhenLaunch) alertDialog(\"获取音乐链接超时,请尝试其他音乐\")\n\t\t\treturn false\n\t\t}\n\t} else {\n\t\treturn filePath\n\t}\n}\n\nexport const checkMusicPlayWays = () => {\n\tif(localStorage.getItem(\"playByOrder\") === \"yes\" || !localStorage.getItem(\"playByOrder\")){\n\t\t$dispatch(updatePauseWhenOver(true))\n\t\t$dispatch(updatePlayByOrder(true))\n\t\t$dispatch(updatePlayByRandom(false))\n\t\t$dispatch(updateMusicMenuBadge([\n\t\t\t{\n\t\t\t\tindex: 2,\n\t\t\t\ttext: '',\n\t\t\t}, {\n\t\t\t\tindex: 3,\n\t\t\t\ttext: '',\n\t\t\t}, {\n\t\t\t\tindex: 4,\n\t\t\t\ttext: '✔️',\n\t\t\t}, {\n\t\t\t\tindex: 5,\n\t\t\t\ttext: '',\n\t\t\t}\n\t\t]))\n\t} else if(localStorage.getItem(\"pauseWhenOver\") === \"yes\" && (localStorage.getItem(\"playByRandom\") === \"no\" || !localStorage.getItem(\"playByRandom\"))){\n\t\t$dispatch(updatePauseWhenOver(true))\n\t\t$dispatch(updatePlayByOrder(true))\n\t\t$dispatch(updatePlayByRandom(false))\n\t\t$dispatch(updateMusicMenuBadge([\n\t\t\t{\n\t\t\t\tindex: 2,\n\t\t\t\ttext: '✔️',\n\t\t\t}, {\n\t\t\t\tindex: 3,\n\t\t\t\ttext: '',\n\t\t\t}, {\n\t\t\t\tindex: 4,\n\t\t\t\ttext: '',\n\t\t\t}, {\n\t\t\t\tindex: 5,\n\t\t\t\ttext: '',\n\t\t\t}\n\t\t]))\n\t} else if(localStorage.getItem(\"pauseWhenOver\") === \"no\" && (localStorage.getItem(\"playByRandom\") === \"no\" || !localStorage.getItem(\"playByRandom\"))){\n\t\t$dispatch(updatePauseWhenOver(false))\n\t\t$dispatch(updatePlayByOrder(false))\n\t\t$dispatch(updatePlayByRandom(false))\n\t\t$dispatch(updateMusicMenuBadge([\n\t\t\t{\n\t\t\t\tindex: 2,\n\t\t\t\ttext: '',\n\t\t\t}, {\n\t\t\t\tindex: 3,\n\t\t\t\ttext: '✔️',\n\t\t\t}, {\n\t\t\t\tindex: 4,\n\t\t\t\ttext: '',\n\t\t\t}, {\n\t\t\t\tindex: 5,\n\t\t\t\ttext: '',\n\t\t\t}\n\t\t]))\n\t} else if(localStorage.getItem(\"playByRandom\") === \"yes\"){\n\t\t$dispatch(updatePauseWhenOver(true))\n\t\t$dispatch(updatePlayByOrder(false))\n\t\t$dispatch(updatePlayByRandom(true))\n\t\t$dispatch(updateMusicMenuBadge([\n\t\t\t{\n\t\t\t\tindex: 2,\n\t\t\t\ttext: '',\n\t\t\t}, {\n\t\t\t\tindex: 3,\n\t\t\t\ttext: '',\n\t\t\t}, {\n\t\t\t\tindex: 4,\n\t\t\t\ttext: '',\n\t\t\t}, {\n\t\t\t\tindex: 5,\n\t\t\t\ttext: '✔️',\n\t\t\t}\n\t\t]))\n\t}\n}\n\nexport const checkLastMusicPlayInfo = () => {\n\ttry {\n\t\tconst lastPlaySongInfo = (localStorage.getItem('lastPlaySongInfo') && JSON.parse(localStorage.getItem('lastPlaySongInfo')))\n\t\tconst lastPlaySongPageType = localStorage.getItem('lastPlaySongPageType')\n\t\tconst lastPlaySongMusicDataList = (localStorage.getItem('lastPlaySongMusicDataList') && JSON.parse(localStorage.getItem('lastPlaySongMusicDataList')))\n\t\tif(lastPlaySongInfo && lastPlaySongPageType && lastPlaySongMusicDataList){\n\t\t\t$dispatch(updateCurrentMusicItemInfo(lastPlaySongInfo))\n\t\t\tplayMusic({\n\t\t\t\tfilePath: lastPlaySongInfo.filePath,\n\t\t\t\tfilenameOrigin: lastPlaySongInfo.filenameOrigin,\n\t\t\t\tduration: lastPlaySongInfo.duration,\n\t\t\t\toriginal: lastPlaySongInfo.original,\n\t\t\t\tmusicDataList: lastPlaySongMusicDataList,\n\t\t\t\tpageType: lastPlaySongPageType,\n\t\t\t\tfilename: lastPlaySongInfo.filename,\n\t\t\t\tmusicId: lastPlaySongInfo.id,\n\t\t\t\tsongOriginal: lastPlaySongInfo.original,\n\t\t\t\tcheckLastMusicWhenLaunch: true,\n\t\t\t\tsongInfo: lastPlaySongInfo\n\t\t\t})\n\t\t}\n\t} catch(err){\n\t\tlogger.error(\"checkLastMusicPlayInfo err\", err)\n\t\talertDebug(`checkLastMusicPlayInfo err:${err}`)\n\t}\n}\n\nexport const getFilenameWithoutExt = (filename) => {\n\tlet singleFilenameArr = filename.split(\".\");\n\tif(singleFilenameArr.length !== 1) singleFilenameArr.pop();\n\tconst filenameWithoutExt = singleFilenameArr.join(\"\");\n\treturn filenameWithoutExt;\n}\n\nexport const hideMusicController = () => {\n\tdocument.querySelector(\"#root .container .main-content\").style.height = \"100vh\"\n\twindow.musicControllerRef && window.musicControllerRef.current.style && (window.musicControllerRef.current.style.display = \"none\")\n}\n\nexport const saveMusicToLocal = ({\n\tmusicDataList,\n\tfilename,\n\tuploadUsername,\n\tfileSize,\n\tmusicSrc,\n\tfilenameOrigin,\n\tduration,\n\tsongOriginal,\n\tmusicId,\n\tpayDownload\n}) => {\n\tif(!filenameOrigin) return\n\tconst { downloadingMusicItems, downloadedMusicList } = $getState().fileServer\n\tconst { token } = $getState().login\n\tlet isDownloading = false, musicDownloaded=false\n\tif(payDownload) return alert(\"尊重版权,人人有责\")\n\tif(!token) return window.goRoute(null, \"/login\")\n\tfilenameOrigin = removePrefixFromFileOrigin(filenameOrigin)\n\t// 先判断音乐是否正在下载，再判断音乐是否已下载\n\tif(window.isCordova){\n\t\tdownloadingMusicItems.some((item) => {\n\t\t\tif(removePrefixFromFileOrigin(item.filenameOrigin) === filenameOrigin){\n\t\t\t\tisDownloading = true\n\t\t\t\tconfirm(`提示`, `${filename}正在下载`, \"去查看\", () => {\n\t\t\t\t\t$dispatch(updateShowMusicPlayingFromMusicControl(false))\n\t\t\t\t\twindow.goRoute(null, \"/my_finished_musics\")\n\t\t\t\t})\n\t\t\t\treturn true\n\t\t\t} else {\n\t\t\t\treturn false\n\t\t\t}\n\t\t})\n\t}\n\tdownloadedMusicList.some((item) => {\n\t\tif(removePrefixFromFileOrigin(item.filenameOrigin) === filenameOrigin){\n\t\t\tmusicDownloaded = true\n\t\t\talertDialog(`${filename}已下载`)\n\t\t\treturn true\n\t\t} else {\n\t\t\treturn false\n\t\t}\n\t})\n\tif(!isDownloading && !musicDownloaded){\n\t\treturn checkFileWritePriority()\n\t\t\t.then(bool => {\n\t\t\t\tif(bool){\n\t\t\t\t\talert(`开始下载${filename}`)\n\t\t\t\t\tupdateDownloadingStatus(filename, '准备中', uploadUsername, fileSize, true, musicSrc, filenameOrigin, true, {duration})\n\t\t\t\t\tsaveFileToLocal({\n\t\t\t\t\t\tfilenameOrigin,\n\t\t\t\t\t\tfileUrl: musicSrc,\n\t\t\t\t\t\tfolder: \"music\",\n\t\t\t\t\t\tfilename,\n\t\t\t\t\t\tuploadUsername,\n\t\t\t\t\t\tneedSaveToDownloadBox: true,\n\t\t\t\t\t\tfileSize,\n\t\t\t\t\t\tfromMusic: true,\n\t\t\t\t\t\toptions: {duration, original: songOriginal, musicId, musicDataList}\n\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\treturn alertDialog(\"请授予文件读写权限，否则不能下载音乐\", \"\", \"知道了\", requestFileWritePriority)\n\t\t\t\t}\n\t\t\t})\n\t}\n}\n\nexport const secondsToTime = ( secs ) => {\n\tlet hours = Math.floor( secs / 3600 )\n\t,   minutes = Math.floor( secs % 3600 / 60 )\n\t,   seconds = Math.ceil( secs % 3600 % 60 );\n\treturn ( hours == 0 ? '' : hours > 0 && hours.toString().length < 2 ? '0'+hours+':' : hours+':' )\n\t\t+ ( minutes.toString().length < 2 ? '0'+minutes : minutes )\n\t\t+ ':' + (seconds.toString().length < 2 ? '0'+seconds : seconds );\n}\n\nexport const touchDirection = (obj, direction, fun, touchDirectionObj) => {\n\t//direction:swipeLeft,swipeRight,swipeTop,swipedown,singleTap,touchstart,touchmove,touchend\n\t//   划左， 划右， 划上， 划下，点击， 开始触摸， 触摸移动， 触摸结束\n\tconst defaults = {x: 5, y: 5, ox: 0, oy: 0, nx: 0, ny: 0};\n\t//配置：划的范围在5X5像素内当点击处理\n\tobj.addEventListener(\"touchstart\", touchStart.bind(this, defaults, direction, fun, ), false);\n\tobj.addEventListener(\"touchmove\", touchMove.bind(this, defaults, direction, fun, touchDirectionObj), false);\n\t// obj.addEventListener(\"touchend\", touchEnd.bind(this, defaults, direction, fun), false);\n}\n\nexport const removeTouchDirection = (obj) => {\n\tobj.removeEventListener(\"touchstart\", touchStart, false);\n\tobj.removeEventListener(\"touchmove\", touchMove, false);\n\t// obj.removeEventListener(\"touchend\", touchEnd.bind(this, defaults, direction, fun), false);\n}\n\nfunction touchStart(defaults, direction, fun, event){\n\tdefaults.ox = event.targetTouches[0].pageX;\n\tdefaults.oy = event.targetTouches[0].pageY;\n\tdefaults.nx = defaults.ox;\n\tdefaults.ny = defaults.oy;\n\tlogger.info(\"touchStart defaults.ox\", defaults.ox)\n\tif (direction.indexOf(\"touchstart\") != -1) fun();\n}\n\nfunction touchMove(defaults, direction, fun, touchDirectionObj, event){\n\tdebounceOpt(() => {\n\t\tevent.preventDefault();\n\t\tdefaults.nx = event.targetTouches[0].pageX;\n\t\tdefaults.ny = event.targetTouches[0].pageY;\n\t\tif (direction.indexOf(\"touchmove\") != -1) fun();\n\t\tlogger.info(\"touchMove defaults.nx\", defaults.nx)\n\t\ttouchEnd(defaults, direction, fun, event)\n\t}, 10, touchDirectionObj)\n}\n\nfunction touchEnd(defaults, direction, fun, event){\n\tdebounceOpt(() => {\n\t\tconst changeY = defaults.oy - defaults.ny;\n\t\tconst changeX = defaults.ox - defaults.nx;\n\t\tif (Math.abs(changeX) > Math.abs(changeY) && Math.abs(changeX) > defaults.x) {\n\t\t\t//左右事件\n\t\t\tif (changeX > 0) {\n\t\t\t\tlogger.info(\"touchEnd left changeX\", changeX)\n\t\t\t\tif (direction.indexOf(\"swipeLeft\") != -1) fun('left');\n\t\t\t} else {\n\t\t\t\tlogger.info(\"touchEnd right changeX\", changeX)\n\t\t\t\tif (direction.indexOf(\"swipeRight\") != -1) fun('right');\n\t\t\t}\n\t\t} else if (Math.abs(changeY) > Math.abs(changeX) && Math.abs(changeY) > defaults.y) {\n\t\t\t//上下事件\n\t\t\tif (changeY > 0) {\n\t\t\t\tif (direction.indexOf(\"swipeTop\") != -1) fun();\n\t\t\t} else {\n\t\t\t\tif (direction.indexOf(\"swipedown\") != -1) fun();\n\t\t\t}\n\t\t} else {\n\t\t\t//点击事件\n\t\t\tif (direction.indexOf(\"singleTap\") != -1) fun();\n\t\t}\n\t\tif (direction.indexOf(\"touchend\") != -1) fun();\n\t}, 10, {})\n}\n\nexport const logActivity = (data={}) => {\n\tconst { username } = $getState().login\n\tconst { appVersion, currentLocation, allowOthersGetPosition, allowShareMyNickname, adPicSrc } = $getState().common\n\tconst { musicCollection, playByOrder, pauseWhenOver } = $getState().fileServer\n\tconst { isSignedUp, lastSignUpTime, onlinePersonsNum } = $getState().sign\n\tconst obj = {\n\t\tuserId: $getState().login.userId,\n\t\turl: window.getRoute(),\n\t\tusername,\n\t\tappVersion,\n\t\tcurrentLocation,\n\t\tallowOthersGetPosition,\n\t\tallowShareMyNickname,\n\t\tadPicSrc,\n\t\tmusicCollectionLength: musicCollection.length,\n\t\tplayByOrder,\n\t\tpauseWhenOver,\n\t\tisSignedUp,\n\t\tlastSignUpTime,\n\t\tonlinePersonsNum,\n\t\t...data\n\t}\n\treturn axios.post(HTTP_URL.userActivity, obj)\n\t\t.then(() => {\n\t\t\tlogger.info(\"logActivity success url\", window.getRoute())\n\t\t})\n\t\t.catch(err => {\n\t\t\tlogger.error(\"logActivity err\", err)\n\t\t\talertDebug('logActivity err')\n\t\t})\n}\n\nexport const searchFunc = (username=\"\", slice) => {\n    if(!username) return Promise.resolve();\n    window.logger.info(\"userClick searchString\", username);\n\tlet url = \"\"\n\tif(!slice){\n\t\turl =  HTTP_URL.searchPosition.format({username, positiveUsername: $getState().login.username})\n\t\tif(username === $getState().login.username || username === $getState().myInfo.setMobile){\n\t\t\tconst obj = {\n\t\t\t\tpositionText: $getState().common.currentLocation,\n\t\t\t\tstatus: \"在线\"\n\t\t\t}\n\t\t\treturn Promise.resolve(obj);\n\t\t}\n\t} else {\n\t\turl = HTTP_URL.searchRecord.format({username, slice})\n\t}\n    return axios.get(url)\n        .then(response => {\n\t\t\tif(response.data.result && response.data.result.signData){\n\t\t\t\twindow.logger.info(\"searchRecord  response.data\", response.data.result.signData.length);\n\t\t\t}\n            return Promise.resolve(response.data.result);\n        })\n        .catch(err => {\n            networkErr(err, `searchFunc url: ${url}`);\n        })\n}\n\nexport const updateValueFromAutosuggest = (value, self) => {\n\tself.setState({\n\t\tulPadding: \"0\",\n\t\tulDisplay: \"none\",\n\t\tsearchString: value,\n\t\tautoSuggestList: []\n\t});\n\tlet list = []\n\tif(!value) return;\n\tif (self.timer) clearTimeout(self.timer);\n\tself.timer = setTimeout(getAutoSuggest, 500);\n\tfunction getAutoSuggest(){\n\t\taxios.get(HTTP_URL.signRecordTypeahead.format({query: value}))\n\t\t\t.then((msg) => {\n\t\t\t\tconst { response } = msg.data.result\n\t\t\t\tif (msg.data.status == \"SUCCESS\" && response.length) {\n\t\t\t\t\tlogger.info(\"signRecordTypeahead result.response\", response)\n\t\t\t\t\tif(Array.isArray(response)){\n\t\t\t\t\t\tresponse.forEach(item => {\n\t\t\t\t\t\t\tlist.push(item);\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t\tself.setState({\n\t\t\t\t\t\tautoSuggestList: list\n\t\t\t\t\t}, () => {\n\t\t\t\t\t\tself.setState({\n\t\t\t\t\t\t\tulPadding: \"4px 8px\",\n\t\t\t\t\t\t\tulDisplay: \"block\"\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\tif(!response.length){\n\t\t\t\t\t\tself.setState({\n\t\t\t\t\t\t\tautoSuggestList: list\n\t\t\t\t\t\t}, () => {\n\t\t\t\t\t\t\tself.setState({\n\t\t\t\t\t\t\t\tulPadding: \"0\",\n\t\t\t\t\t\t\t\tulDisplay: \"none\"\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t})\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tlogger.error(\"SearchUserHistory getAutoSuggest error\", err.stack || err.toString())\n\t\t\t\treturn networkErr(err, `SearchUserHistory signRecordTypeahead query: ${value}`);\n\t\t\t})\n\t}\n}\nexport const jsonp = (url, params, cb) => {\n\treturn new Promise((resolve, reject) => {\n\t\twindow[cb] = function (data) { // 声明全局变量\n\t\t\tresolve(data)\n\t\t\tdocument.body.removeChild(script)\n\t\t}\n\t\tparams = { ...params, cb }\n\t\tlet arrs = []\n\t\tfor (let key in params) {\n\t\t\tarrs.push(`${key}=${params[key]}`)\n\t\t}\n\t\tlet script = document.createElement('script')\n\t\tscript.src = `${url}?${arrs.join('&')}`\n\t\tdocument.body.appendChild(script)\n\t})\n}\n\nexport const checkDownloadedOrNot = async (fileUrl, appName, MD5, downloadAppFunc, preview, obj={}) => {\n\tconst isAppExisted = await checkExternalFileExistOrNot(appName)\n\tlogActivity({msg: \"start to upgrade app\"})\n\tif(isAppExisted){\n\t\twindow.resolveLocalFileSystemURL(\n\t\t\twindow.cordova.file.externalApplicationStorageDirectory,\n\t\t\tfunction (fs) {\n\t\t\t\tfs.getFile(\n\t\t\t\t\tappName,\n\t\t\t\t\t{create: false, exclusive: true},\n\t\t\t\t\tfunction (fileEntry) {\n\t\t\t\t\t\treturn new Promise(res => {\n\t\t\t\t\t\t\treturn checkAppMD5(fileEntry, MD5, null, res, false, preview)\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then(md5IsEqual => {\n\t\t\t\t\t\t\tlogger.info(\"checkDownloadedOrNot md5IsEqual\", md5IsEqual)\n\t\t\t\t\t\t\tif(md5IsEqual === false) {\n\t\t\t\t\t\t\t\tdownloadAppFunc(fileUrl, appName, MD5)\n\t\t\t\t\t\t\t} else if(md5IsEqual === \"cancel\"){\n\t\t\t\t\t\t\t\tobj.forceUpgrade && obj.exit()\n\t\t\t\t\t\t\t} else if(md5IsEqual){\n\t\t\t\t\t\t\t\tpreview(fileEntry, 'application/vnd.android.package-archive')\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t},\n\t\t\t\t\tfunction(err){\n\t\t\t\t\t\tlogger.error(\"about checkDownloadedOrNot err\", err)\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t)\n\t} else {\n\t\tdownloadAppFunc(fileUrl, appName, MD5)\n\t}\n}\n\nexport const checkAppMD5 = (fileEntry, MD5, entry, res, needErrorTip, preview) => {\n\tmd5chksum.file(fileEntry, win, fail);\n\tfunction win(md5sum){\n\t\tlogger.info(\"about page app package MD5SUM: \" + md5sum);\n\t\tif(md5sum === MD5){\n\t\t\t$dispatch(updateAppUpdating(false))\n\t\t\t$dispatch(updateHasDownloadedPackage(true))\n\t\t\tcordova.plugins.notification.local.schedule({\n\t\t\t\ttitle: '下载完成',\n\t\t\t\ttext: '点击安装',\n\t\t\t\tprogressBar: false\n\t\t\t});\n\t\t\tconfirm(\"提示\",\"下载完成\",\"立即安装\", function(){\n\t\t\t\tif(entry){\n\t\t\t\t\tentry.file(data => {\n\t\t\t\t\t\tpreview(fileEntry, data.type)\n\t\t\t\t\t\t// 此处data.type可以直接得到文件的MIME-TYPE类型\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tlogActivity({msg: \"start to install app\"})\n\t\t\t\tres(true);\n\t\t\t}, () => {\n\t\t\t\tres(\"cancel\");\n\t\t\t})\n\t\t} else{\n\t\t\tif(needErrorTip){\n\t\t\t\tlogger.error(\"about page checkAppMD5 md5sum !== MD5 md5sum, MD5\", md5sum, MD5)\n\t\t\t\t$dispatch(updateAppUpdating(false))\n\t\t\t\t$dispatch(updateHasDownloadedPackage(true))\n\t\t\t\talertDialog('提示', \"安装包已损坏，请重新安装\")\n\t\t\t}\n\t\t\tres(false)\n\t\t}\n\t}\n\tfunction fail(error){\n\t\tif(needErrorTip){\n\t\t\tlogger.error(\"about page checkAppMD5 fail Error-Message: \",  error);\n\t\t\t$dispatch(updateAppUpdating(false))\n\t\t\t$dispatch(updateHasDownloadedPackage(true))\n\t\t\talertDialog('提示', \"安装包已损坏，请重新安装\")\n\t\t}\n\t}\n}\n\nexport const optimizeLoadPerformance = (dataList, firstRender, showNumbers, setFirstRender) => {\n\tlet dataListCopy = JSON.parse(JSON.stringify(dataList))\n\tif(firstRender){\n\t\tdataListCopy = dataListCopy.slice(0, showNumbers)\n\t\tsetTimeout(() => setFirstRender(false), parseInt(1000 / 60))\n\t}\n\tdataListCopy = removeDuplicateObjectList(dataListCopy, 'filenameOrigin')\n\treturn dataListCopy\n}\n\nexport const setTryMobileOrEmailTimes = (tryMobileOrEmailTimes) => {\n\t$dispatch(updateTryMobileOrEmailTimes(++tryMobileOrEmailTimes))\n\tsetTimeout(() => {\n\t\t$dispatch(updateTryMobileOrEmailTimes(0))\n\t}, 1000 * 60 * 2)\n}\n\nexport const parseUrlParam = (param) => {\n\tconst tempObj = {}\n\tif(param){\n\t\tparam.split(\"&\").forEach(item => {\n\t\t\tconst tempArr = item.split(\"=\")\n\t\t\ttempObj[tempArr[0]] = tempArr[1]\n\t\t})\n\t}\n\treturn tempObj\n}\n\nexport const dealWithThirdPartVisit = () => {\n\tconst thirdPart = (window.location.href.split(\"?\").length > 1) ? decodeURIComponent(window.location.href.split(\"?\").pop()) : false\n\tif(thirdPart){\n\t\tconst queryParams = parseUrlParam(thirdPart)\n\t\tlogger.info(\"queryParams\", queryParams)\n\t\treturn queryParams\n\t} else {\n\t\treturn false\n\t}\n}\n\nlet currentTime = new Date().getTime()\nexport const saveFileToLocalFunc = async (filename, uploadUsername, fileSize, filePath, retry, filenameOrigin, history, openFileFunc) => {\n\tconst {token} = $getState().login\n\tconst { downloadingFileList, downloadedFileList } = $getState().fileServer\n\tif(!token) return history.push(\"/login\")\n\tif(!window.isCordova){\n\t\treturn saveFileToLocal({\n\t\t\tfilenameOrigin,\n\t\t\tfileUrl: filePath,\n\t\t\tfolder: \"download\",\n\t\t\tfilename,\n\t\t\tuploadUsername,\n\t\t\tneedSaveToDownloadBox: true,\n\t\t\tfileSize,\n\t\t\tfromMusic: false,\n\t\t})\n\t}\n\tif((new Date().getTime() - currentTime) < 300){\n\t\t// not allow to click frequently\n\t\tcurrentTime = new Date().getTime();\n\t\treturn;\n\t}\n\tlet isDownload = false\n\tconst filenameOriginOld = filenameOrigin\n\tfilenameOrigin = removePrefixFromFileOrigin(filenameOrigin)\n\tif(!retry && window.isCordova){\n\t\tdownloadingFileList.some((item) => {\n\t\t\tif(removePrefixFromFileOrigin(item.filenameOrigin) === filenameOrigin){\n\t\t\t\tisDownload = true\n\t\t\t\tconfirm(`提示`, `${filename}正在下载`, \"去查看\", () => {\n\t\t\t\t\thistory.push(\"/my_finished_files\")\n\t\t\t\t})\n\t\t\t\treturn true\n\t\t\t} else {\n\t\t\t\treturn false\n\t\t\t}\n\t\t})\n\t}\n\tdownloadedFileList.some((item) => {\n\t\tif(removePrefixFromFileOrigin(item.filenameOrigin) === filenameOrigin && (!item.status || item.status === \"downloaded\")){\n\t\t\tisDownload = true\n\t\t\tif(openFileFunc){\n\t\t\t\topenFileFunc(filename, filenameOriginOld)\n\t\t\t} else {\n\t\t\t\talert(\"文件已下载\")\n\t\t\t}\n\t\t\treturn true\n\t\t} else {\n\t\t\treturn false\n\t\t}\n\t})\n\tif(!isDownload){\n\t\treturn checkFileWritePriority()\n\t\t\t.then(bool => {\n\t\t\t\tif(bool){\n\t\t\t\t\tif(retry){\n\t\t\t\t\t\talert(`重新下载${filename}`)\n\t\t\t\t\t} else {\n\t\t\t\t\t\talert(`开始下载${filename}`)\n\t\t\t\t\t}\n\t\t\t\t\tupdateDownloadingStatus(filename, '准备中', uploadUsername, fileSize, true, filePath, filenameOrigin, false, {})\n\t\t\t\t\tsaveFileToLocal({\n\t\t\t\t\t\tfilenameOrigin,\n\t\t\t\t\t\tfileUrl: filePath, folder: \"download\",\n\t\t\t\t\t\tfilename,\n\t\t\t\t\t\tuploadUsername,\n\t\t\t\t\t\tneedSaveToDownloadBox: true,\n\t\t\t\t\t\tfileSize,\n\t\t\t\t\t\tfromMusic: false,\n\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\treturn alertDialog(\"请授予文件读写权限，否则不能下载文件\", \"\", \"知道了\", requestFileWritePriority)\n\t\t\t\t}\n\t\t\t})\n\t}\n}\n\nexport const removeTagFromFilename = (filename) => {\n\tif(!filename) return \"\"\n\treturn filename.replace(/\\<span class=\"hight\\-light\\-keyword\"\\>/g, \"\").replace(/\\<\\/span\\>/g, \"\")\n}\n\nexport const dealPlayAfterRemove = (currentFileIndex, currentMusicFilenameOriginalArr, original, musicDataList) => {\n\tlocalStorage.removeItem('lastPlaySongInfo')\n\tlocalStorage.removeItem('lastPlaySongPageType')\n\tlocalStorage.removeItem('lastPlaySongMusicDataList')\n\tconst { soundPlaying } = $getState().fileServer\n\tconst currentMusicFilenameOriginalArrCopy = JSON.parse(JSON.stringify(currentMusicFilenameOriginalArr))\n\tconst musicDataListCopy = JSON.parse(JSON.stringify(musicDataList))\n\tcurrentMusicFilenameOriginalArrCopy.splice(currentFileIndex, 1)\n\tmusicDataListCopy.splice(currentFileIndex, 1)\n\tif(!currentMusicFilenameOriginalArrCopy.length || !soundPlaying) {\n\t\tstopMusic()\n\t} else if(soundPlaying) {\n\t\tplayNextSong(currentFileIndex - 1, currentMusicFilenameOriginalArrCopy, original, musicDataListCopy, null)\n\t}\n}\n","let db;\nconst request = window.indexedDB.open(\"file\", 1);\nrequest.onerror = function (event) {\n\tlogger.error('file数据库打开报错');\n};\nrequest.onsuccess = function (event) {\n\tdb = request.result;\n\tlogger.info('file数据库打开成功');\n};\n\nrequest.onupgradeneeded = function (event) {\n\tdb = event.target.result;\n\tdb.createObjectStore('file', { keyPath: 'filenameOrigin' });\n}\n\nexport const addDataFromIndexDB = (contentObj) => {\n\tif (Object.prototype.toString.call(contentObj) !== '[object Object]') {\n\t\treturn Promise.reject(\"error_data_type\")\n\t}\n\treturn new Promise((resolve, reject) => {\n\t\tconst request = db.transaction(['file'], 'readwrite')\n\t\t\t.objectStore('file')\n\t\t\t.add(contentObj);\n\n\t\trequest.onsuccess = function (event) {\n\t\t\tresolve(\"success\")\n\t\t\tlogger.info('file 数据写入成功');\n\t\t};\n\n\t\trequest.onerror = function (event) {\n\t\t\treject(event)\n\t\t\tlogger.warn('file 数据写入失败');\n\t\t}\n\t})\n}\n\nexport const readAllDataFromIndexDB = () => {\n\tconst result = []\n\treturn new Promise((resolve, reject) => {\n\t\tconst objectStore = db.transaction('file').objectStore('file');\n\t\tobjectStore.openCursor().onsuccess = function (event) {\n\t\t\tconst cursor = event.target.result;\n\t\t\tif (cursor) {\n\t\t\t\tresult.push(cursor.value)\n\t\t\t\tcursor.continue();\n\t\t\t} else {\n\t\t\t\tresolve(result)\n\t\t\t}\n\t\t};\n\t})\n\n}\n\nexport const removeDataByIndexFromIndexDB = (queryString) => {\n\treturn new Promise((resolve, reject) => {\n\t\tconst request = db.transaction(['file'], 'readwrite')\n\t\t\t.objectStore('file')\n\t\t\t.delete(queryString);\n\n\t\trequest.onsuccess = function (e) {\n\t\t\tconst result = e.target.result;\n\t\t\tlogger.info(\"file 数据移除成功\", result)\n\t\t\tif (result) {\n\t\t\t\tresolve(result)\n\t\t\t} else {\n\t\t\t\tresolve(\"success\")\n\t\t\t}\n\t\t}\n\t\trequest.onerror = function (event) {\n\t\t\tlogger.error('file 数据移除失败');\n\t\t\treject(event)\n\t\t}\n\t})\n}\n","let db;\nconst request = window.indexedDB.open(\"music\", 1);\nrequest.onerror = function (event) {\n\tlogger.error('music 数据库打开报错');\n};\nrequest.onsuccess = function (event) {\n\tdb = request.result;\n\tlogger.info('music 数据库打开成功');\n};\n\nrequest.onupgradeneeded = function (event) {\n\tdb = event.target.result;\n\tdb.createObjectStore('music', { keyPath: 'filenameOrigin' });\n}\n\nexport const addMusicDataFromIndexDB = (contentObj) => {\n\tif (Object.prototype.toString.call(contentObj) !== '[object Object]') {\n\t\treturn Promise.reject(\"error_data_type\")\n\t}\n\treturn new Promise((resolve, reject) => {\n\t\tconst request = db.transaction(['music'], 'readwrite')\n\t\t\t.objectStore('music')\n\t\t\t.add(contentObj);\n\n\t\trequest.onsuccess = function (event) {\n\t\t\tresolve(\"success\")\n\t\t\tlogger.info('music 数据写入成功');\n\t\t};\n\n\t\trequest.onerror = function (event) {\n\t\t\treject(event)\n\t\t\tlogger.warn('music 数据写入失败');\n\t\t}\n\t})\n}\n\nexport const readAllMusicDataFromIndexDB = () => {\n\tconst result = []\n\treturn new Promise((resolve, reject) => {\n\t\tconst objectStore = db.transaction('music').objectStore('music');\n\t\tobjectStore.openCursor().onsuccess = function (event) {\n\t\t\tconst cursor = event.target.result;\n\t\t\tif (cursor) {\n\t\t\t\tresult.push(cursor.value)\n\t\t\t\tcursor.continue();\n\t\t\t} else {\n\t\t\t\tresolve(result)\n\t\t\t}\n\t\t};\n\t})\n\n}\n\nexport const removeMusicDataByIndexFromIndexDB = (queryString) => {\n\treturn new Promise((resolve, reject) => {\n\t\tconst request = db.transaction(['music'], 'readwrite')\n\t\t\t.objectStore('music')\n\t\t\t.delete(queryString);\n\n\t\trequest.onsuccess = function (e) {\n\t\t\tconst result = e.target.result;\n\t\t\tlogger.info(\"music 数据移除成功\", result)\n\t\t\tif (result) {\n\t\t\t\tresolve(result)\n\t\t\t} else {\n\t\t\t\tresolve(\"success\")\n\t\t\t}\n\t\t}\n\t\trequest.onerror = function (event) {\n\t\t\tlogger.error('music 数据移除失败');\n\t\t\treject(event)\n\t\t}\n\t})\n}\n","export const CONSTANT = {\n\tstatusBarColor: \"#81AFED\",\n\ttoastLoadingTime: 900,\n\ttoastTime: 1,\n\tstrokeDashoffset: 314,\n\tmusicOriginal: {\n\t\tnetEaseCloud: \"netEaseCloud\",\n\t\tqqMusic: \"qqMusic\",\n\t\tkuGouMusic: \"kuGouMusic\",\n\t\tkuWoMusic: \"kuWoMusic\",\n\t\tmusicSearch: \"musicSearch\",  //本地搜索的音乐\n\t\tmusicShare: \"musicShare\",\n\t\tsavedSongs: \"savedSongs\",\n\t\twindow: \"window\",\n\t\tmusicFinished: \"musicFinished\",\n\t\tmusicDownloading: \"musicDownloading\",\n\t\tmusicRecent: \"musicRecent\"\n\t},\n\tshowMusicNumberPerTime: 40,\n\tshowFileNumberPerTime: 40,\n\tappDownloadUrl: \"http://119.28.190.249:9527/src/Images/%E8%A7%85%E6%98%9F%E5%B3%B0.apk\",\n\tappStaticDirectory: \"http://www.zhoushoujian.com/mixingfeng/share/\",\n\tdownloadAppFromPage: \"downloadAppFromPage\"\n}\n","import { Modal, Toast } from \"antd-mobile\";\nimport Logger from \"cordova-logger\"\nimport { updateToken } from \"../ducks/login\";\nimport { CONSTANT } from \"../constants/enumeration\";\nimport { HTTP_URL } from \"../constants/httpRoute\"\nimport { updateDownloadingFileList, updateFileList, updateDownloadedMusicList, updateDownloadingMusicItems, updateDownloadedFileList } from \"../ducks/fileServer\"\nimport { calcSize, checkFilePath, reconnectSocket, logActivity } from \"../logic/common\";\nimport { addDataFromIndexDB, removeDataByIndexFromIndexDB } from \"./indexDB\"\nimport { addMusicDataFromIndexDB, removeMusicDataByIndexFromIndexDB } from \"./indexDBMusic\"\n\nexport const alertDialog = (title, text, button=\"确定\", cb) => {\n\tModal.alert(title, text, [\n\t\t{\n\t\t\ttext: button,\n\t\t\tonPress: () => {\n\t\t\t\twindow.logger.info(`alertDialog confirm enter title, text`, title, text);\n\t\t\t\tif(cb instanceof Function){\n\t\t\t\t\tcb()\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t]);\n}\n\nexport const confirm = function(title, text, button=\"确定\", cb, cancelFunc=false){\n\tModal.alert(title, text, [\n\t\t{ text: '取消', onPress: () => {\n\t\t\twindow.logger.info(`confirm cancel title, text`, title, text);\n\t\t\tif(cancelFunc){\n\t\t\t\tcancelFunc();\n\t\t\t}\n\t\t} },\n\t\t{\n\t\t\ttext: button,\n\t\t\tonPress: () => {\n\t\t\t\twindow.logger.info(`confirm enter title, text`, title, text);\n\t\t\t\treturn new Promise((resolve) => resolve(cb()))\n\t\t\t}\n\t\t},\n\t]);\n}\n\nexport const networkErr = function(err, originTip){\n\tlogger.error(\"networkErr window.getRoute()\", window.getRoute())\n\tif(originTip){\n\t\tlogger.error(\"networkErr originTip\", originTip)\n\t}\n\tif(err === undefined){\n\t\tlogger.warn(\"network err 请检查网络连接\")\n\t\tif(window.showToastFail){\n\t\t\treturn\n\t\t} else {\n\t\t\twindow.showToastFail = true\n\t\t\tsetTimeout(() => {\n\t\t\t\twindow.showToastFail = false\n\t\t\t}, 1000)\n\t\t\treturn Toast.fail(\"请检查网络连接\", CONSTANT.toastTime);\n\t\t}\n\t} else {\n\t\tif(Object.prototype.toString.call(err) === '[object Error]'){\n\t\t\talertDebug(\"[object Error]: 请检查网络连接: \" + err.stack || err.toString());\n\t\t\tlogger.warn(\"networkErr\" , err.stack || err.toString())\n\t\t} else if(Object.prototype.toString.call(err) === '[object Object]') {\n\t\t\talertDebug(\"[object Object]: 请检查网络连接: \" + err);\n\t\t\tlogger.warn(\"networkErr\" , err)\n\t\t} else {\n\t\t\talertDebug(\"请检查网络连接: \" + JSON.stringify(err));\n\t\t\tlogger.warn(\"networkErr\" , err)\n\t\t}\n\t}\n}\n\nexport const writeFile = function (dataObj = \"\", filename = \"sign.txt\", isAppend) {\n\treturn new Promise(function (res) {\n\t\t\twindow.resolveLocalFileSystemURL(\n\t\t\t\twindow.cordova.file.externalApplicationStorageDirectory,\n\t\t\t\tfunction (fs) {\n\t\t\t\t\tfs.getFile(filename, {\n\t\t\t\t\t\t\tcreate: true,\n\t\t\t\t\t\t\texclusive: false\n\t\t\t\t\t\t},\n\t\t\t\t\t\tfunction (fileEntry) {\n\t\t\t\t\t\t\t//创建一个写入对象\n\t\t\t\t\t\t\tfileEntry.createWriter(function (fileWriter) {\n\t\t\t\t\t\t\t\t//文件写入成功\n\t\t\t\t\t\t\t\tfileWriter.onwriteend = function () {\n\t\t\t\t\t\t\t\t\t// window.logger.info(`文件写入成功`, dataObj);\n\t\t\t\t\t\t\t\t\tres(dataObj)\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t//文件写入失败\n\t\t\t\t\t\t\t\tfileWriter.onerror = function (e) {\n\t\t\t\t\t\t\t\t\twindow.logger.error(`文件写入失败`, JSON.stringify(e));\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\tif(isAppend) fileWriter.seek(fileWriter.length);\n\t\t\t\t\t\t\t\t//写入文件\n\t\t\t\t\t\t\t\tfileWriter.write(dataObj);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}, onErrorCreateFile);\n\t\t\t\t}, onErrorLoadFs);\n\t})\n}\n\nexport const isEmptyFileFunc =  async function (filename = \"sign.txt\", hasToken) {\n\tlet content = await getAndReadFile(filename, true)\n\treturn new Promise(function (res) {\n\t\tif (hasToken) {\n\t\t\tif (content && content.token) {\n\t\t\t\twindow.logger.info(`含有token`);\n\t\t\t\tres(false)\n\t\t\t} else {\n\t\t\t\twindow.logger.info(`不含有token`);\n\t\t\t\tres(true)\n\t\t\t}\n\t\t} else {\n\t\t\tif (content.length) {\n\t\t\t\twindow.logger.info(`含有内容`);\n\t\t\t\tres(false)\n\t\t\t} else {\n\t\t\t\twindow.logger.info(`没有内容`);\n\t\t\t\tres(true)\n\t\t\t}\n\t\t}\n\t})\n}\n\nexport const getAndReadFile = async function (filename, needDecrypt=true) {\n\treturn new Promise(function (res) {\n\t\t\twindow.resolveLocalFileSystemURL(\n\t\t\twindow.cordova.file.externalApplicationStorageDirectory,\n\t\t\tfunction (fs) {\n\t\t\t\tfs.getFile(filename, {\n\t\t\t\t\tcreate: true,\n\t\t\t\t\texclusive: false\n\t\t\t\t}, function (fileEntry) {\n\t\t\t\t\tfileEntry.file(function (file) {\n\t\t\t\t\t\tvar reader = new FileReader();\n\t\t\t\t\t\treader.onloadend = function () {\n\t\t\t\t\t\t\t// window.logger.info(`读取文件的内容`, this.result);\n\t\t\t\t\t\t\tif (this.result) {\n\t\t\t\t\t\t\t\tif(needDecrypt){\n\t\t\t\t\t\t\t\t\tvar b = new window.Base64();\n\t\t\t\t\t\t\t\t\tvar str = b.decode(this.result);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tstr = this.result;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tvar readData = JSON.parse(str);\n\t\t\t\t\t\t\t\t\tres(readData);\n\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\twindow.logger.error(`getAndReadFile, 解析文件内容是出错`, e.stack || e.message || e.toString());\n\t\t\t\t\t\t\t\t\tres();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tres();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\treader.readAsText(file);\n\t\t\t\t\t}, onErrorReadFile);\n\t\t\t\t}, onErrorCreateFile);\n\t\t\t}, onErrorLoadFs);\n\t\t})\n\t\t.catch(e => {\n\t\t\twindow.logger.error(`读取文件的内容发生了错误`, e);\n\t\t})\n}\n\nexport const checkPreviousLogin = async function (filename=\"sign.txt\", isEmptyFile) {\n\tlet content = await getAndReadFile(filename, true)\n\treturn new Promise(function (res) {\n\t\tif (content) {\n\t\t\twindow.$dispatch(updateToken(content.token));\n\t\t\tif (!isEmptyFile) {\n\t\t\t\twindow.logger.info('has login');\n\t\t\t}\n\t\t} else {\n\t\t\twindow.logger.info('never login');\n\t\t}\n\t\tres()\n\t})\n\t.catch(e => {\n\t\twindow.logger.error(`解析上次登录文件时出现错误`, e.stack || e.toString());\n\t})\n}\n\n//文件创建失败回调\nfunction onErrorCreateFile(error) {\n\twindow.logger.error(`文件创建失败！`, error);\n}\n//FileSystem加载失败回调\nfunction onErrorLoadFs(error) {\n\t// navigator.splashscreen.hide();\n\twindow.logger.error(`文件系统加载失败！`, error);\n}\n//文件读取失败回调\nfunction onErrorReadFile(error) {\n\twindow.logger.error(`读取错误!:`, error);\n}\n\nexport const specialBackFunc = () => {\n\t// 统一处理物理按键的返回逻辑\n\twindow.specialBack = true\n}\n\nexport const backToPreviousPage = (self, route, options={}) => {\n\tif(options.specialBack) {\n\t\tlogger.info(\"backToPreviousPage route, options\", route, options)\n\t\tspecialBackFunc()\n\t}\n\twindow.goRoute(self, route);\n}\n\nexport const onBackKeyDown = () => {\n\tconst pageName = window.getRoute();\n\tconst { isFromSystemSetup } = $getState().common\n\tconst { showUpdateConfirm } = $getState().sign\n\tif(isFromSystemSetup) return window.history.back();\n\tif(showUpdateConfirm) return;\n\tlogger.info(\"onBackKeyDown pageName, isFromSystemSetup, showUpdateConfirm\", pageName, isFromSystemSetup, showUpdateConfirm)\n\tif (pageName === \"/main/sign\" || pageName === \"/main/file\" || pageName === \"/main/music\" || pageName === \"/main/myInfo\"){\n\t\twindow.plugins.toast.showShortCenter('再按一次离开')\n\t\tdocument.removeEventListener(\"backbutton\", onBackKeyDown, false); // 注销返回键\n\t\tdocument.addEventListener(\"backbutton\", backToDesktop, false); //绑定退出事件\n\t\tsetTimeout(function () {  // 2秒后重新注册\n\t\t\tdocument.removeEventListener(\"backbutton\", backToDesktop, false); // 注销返回键\n\t\t\tdocument.addEventListener(\"backbutton\", onBackKeyDown, false); // 返回键\n\t\t}, 2000);\n\t} else {\n\t\tsetTimeout(() => {\n\t\t\tif(!window.specialBack){\n\t\t\t\twindow.history.back();\n\t\t\t} else {\n\t\t\t\twindow.specialBack = false\n\t\t\t}\n\t\t}, 50)\n\t}\n}\n\nexport const backToDesktop = () => {\n\tlogger.info(\"backToDesktop goHome\")\n\tnavigator.Backbutton.goHome();\n}\n\nexport const exitApp = () => {\n\tif(window.ws && ws.readyState ===1){\n\t\twindow.ws.close(1000)\n\t}\n\twindow.navigator.app.exitApp();\n}\n\nexport const stopPropagation = (e) => {\n\tif(Object.type(e) === Object.type.EVENT){\n\t\tif(e.stopPropagation){\n\t\t\te.stopPropagation();\n\t\t}\n\t} else if (Object.type(e) === Object.type.OBJECT || Object.type(e) === Object.type.PROXYOBJECT){\n\t\t//Object.type(e) === Object.type.PROXYOBJECT兼容ios10，ios中获取react的事件对象解析为proxyobject，而不是object\n\t\tif(e.stopPropagation){\n\t\t\te.stopPropagation();\n\t\t}\n\t\tif(e.nativeEvent&&e.nativeEvent.stopImmediatePropagation){\n\t\t\tif(e.nativeEvent.stopPropagation){\n\t\t\t\te.nativeEvent.stopPropagation();\n\t\t\t}\n\t\t\tif(e.nativeEvent.stopImmediatePropagation){\n\t\t\t\te.nativeEvent.stopImmediatePropagation();\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport const saveFileToLocal = async({\n\tfilenameOrigin,\n\tfileUrl,\n\tfolder,\n\tfilename,\n\tuploadUsername,\n\tneedSaveToDownloadBox = false,\n\tfileSize,\n\tfromMusic,\n\toptions={}\n}) => {\n\tif(!filenameOrigin) return\n\tif(fromMusic){\n\t\tfileUrl = await checkFilePath(fileUrl, options.original, options.musicId, options.musicDataList, filenameOrigin, false)\n\t\tif(!fileUrl) return alert(\"音乐链接获取失败\")\n\t}\n\tlogger.info(\"saveFileToLocal fileUrl, filenameOrigin\", fileUrl, filenameOrigin)\n\tif(!window.isCordova) {\n\t\tif(folder === CONSTANT.downloadAppFromPage) logActivity({msg: filenameOrigin})\n\t\twindow.open(fileUrl)\n\t\treturn;\n\t}\n\tconst fileTransfer = new FileTransfer();\n\tlet progressPercent = 0, throttleTimer=null, firstTime = true, cancelDownload = false\n\t// 取消下载，移除下载\n\tif(needSaveToDownloadBox){\n\t\twindow.eventEmit.$on(`FileTransfer-${filenameOrigin}`, (type, param) => {\n\t\t\tlogger.info(\"saveFileToLocal FileTransfer type\", type, \"param\", param)\n\t\t\tif(type === \"abort\"){\n\t\t\t\tlogger.info('saveFileToLocal cancel download')\n\t\t\t\tcancelDownload = true;\n\t\t\t\tfileTransfer.abort()\n\t\t\t}\n\t\t\tif(param){\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t// window.eventEmit.$off(`FileTransfer-${filenameOrigin}`)\n\t\t\t\t\tconst { downloadingFileList, downloadingMusicItems } = $getState().fileServer\n\t\t\t\t\tif(param[0] === \"file\"){\n\t\t\t\t\t\tconst downloadingFileListCopy = JSON.parse(JSON.stringify(downloadingFileList))\n\t\t\t\t\t\tfor(let index in downloadingFileList){\n\t\t\t\t\t\t\tif(downloadingFileListCopy[index].filenameOrigin === param[1]){\n\t\t\t\t\t\t\t\tdownloadingFileListCopy.splice(index, 1)\n\t\t\t\t\t\t\t\t$dispatch(updateDownloadingFileList(downloadingFileListCopy))\n\t\t\t\t\t\t\t\tremoveDataByIndexFromIndexDB(param[1])\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if(param[0] === \"music\"){\n\t\t\t\t\t\tconst downloadingMusicItemsCopy = JSON.parse(JSON.stringify(downloadingMusicItems))\n\t\t\t\t\t\tfor(let index in downloadingMusicItems){\n\t\t\t\t\t\t\tif(downloadingMusicItems[index].filenameOrigin === param[1]){\n\t\t\t\t\t\t\t\tdownloadingMusicItemsCopy.splice(index, 1)\n\t\t\t\t\t\t\t\t$dispatch(updateDownloadingMusicItems(downloadingMusicItemsCopy))\n\t\t\t\t\t\t\t\tremoveMusicDataByIndexFromIndexDB(param[1])\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlogger.info(\"saveFileToLocal param, downloadingMusicItems\", param, downloadingMusicItems)\n\t\t\t\t}, 1100)\n\t\t\t}\n\t\t})\n\t}\n\treturn new Promise(function (res) {\n\t\tlogger.info(\"saveFileToLocal prepare to download filenameOrigin\", filenameOrigin)\n\t\tlet fileSizeCopy = fileSize\n        window.requestFileSystem(window.LocalFileSystem.PERSISTENT, 0, function (fs) {\n\t\t\tfs.root.getDirectory('miXingFeng', {\n\t\t\t\tcreate: true\n\t\t\t}, function (dirEntry) {\n\t\t\t\tdirEntry.getDirectory(folder, {\n\t\t\t\t\tcreate: true\n\t\t\t\t}, function (subDirEntry) {\n\t\t\t\t\t//持久化数据保存\n                    subDirEntry.getFile(\n                        filenameOrigin, {create: true, exclusive: false},\n                        function (fileEntry) {\n                            fileTransfer.onprogress = async function (e) {\n\t\t\t\t\t\t\t\tif(!filename) return\n                                if (e.lengthComputable) {\n                                    const progressLine = e.loaded / e.total;\n\t\t\t\t\t\t\t\t\tprogressPercent = (progressLine * 100).toFixed(0);\n\t\t\t\t\t\t\t\t\tif(throttleTimer) return;\n\t\t\t\t\t\t\t\t\tif(firstTime){\n\t\t\t\t\t\t\t\t\t\tlogger.info(\"saveFileToLocal start to download onprogress firstTime filenameOrigin\", filenameOrigin)\n\t\t\t\t\t\t\t\t\t\tfirstTime = false;\n\t\t\t\t\t\t\t\t\t\tfileSizeCopy = (fileSize && fileSize !== \"未知\") ? fileSize : e.total\n\t\t\t\t\t\t\t\t\t\tconst { username } = $getState().login\n\t\t\t\t\t\t\t\t\t\tconst downloadingFileOrigin = `downloading_${filenameOrigin}`\n\t\t\t\t\t\t\t\t\t\tconst downloadingDataToSaveIndexedDBObj = {\n\t\t\t\t\t\t\t\t\t\t\tfilename,\n\t\t\t\t\t\t\t\t\t\t\tusername,\n\t\t\t\t\t\t\t\t\t\t\tfileSize: fileSizeCopy,\n\t\t\t\t\t\t\t\t\t\t\tuploadUsername,\n\t\t\t\t\t\t\t\t\t\t\tdate: Date.now(),\n\t\t\t\t\t\t\t\t\t\t\tfilenameOrigin: downloadingFileOrigin,\n\t\t\t\t\t\t\t\t\t\t\tstatus: \"downloading\",\n\t\t\t\t\t\t\t\t\t\t\tprogress: \"已取消\",\n\t\t\t\t\t\t\t\t\t\t\tfilePath: fileUrl,\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tif(fromMusic){\n\t\t\t\t\t\t\t\t\t\t\tdownloadingDataToSaveIndexedDBObj.isMusic = true\n\t\t\t\t\t\t\t\t\t\t\tdownloadingDataToSaveIndexedDBObj.duration = options.duration\n\t\t\t\t\t\t\t\t\t\t\tdownloadingDataToSaveIndexedDBObj.id = options.fileId || \"downloading\"  //只有下载到本地的共享音乐才有id，且id只能是downloaded\n\t\t\t\t\t\t\t\t\t\t\tdownloadingDataToSaveIndexedDBObj.original = options.original\n\t\t\t\t\t\t\t\t\t\t\t// await removeMusicDataByIndexFromIndexDB(downloadingFileOrigin)\n\t\t\t\t\t\t\t\t\t\t\taddMusicDataFromIndexDB(downloadingDataToSaveIndexedDBObj)\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\taddDataFromIndexDB(downloadingDataToSaveIndexedDBObj)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tupdateDownloadingStatus(filename, `${calcSize(e.loaded)}/${calcSize(e.total)}`, uploadUsername, e.total, needSaveToDownloadBox, fileUrl, filenameOrigin, fromMusic, options)\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tthrottleTimer = setTimeout(() => {\n\t\t\t\t\t\t\t\t\t\t\tclearTimeout(throttleTimer)\n\t\t\t\t\t\t\t\t\t\t\tupdateDownloadingStatus(filename, `${calcSize(e.loaded)}/${calcSize(e.total)}`, uploadUsername, e.total, needSaveToDownloadBox, fileUrl, filenameOrigin, fromMusic, options)\n\t\t\t\t\t\t\t\t\t\t\tthrottleTimer = null;\n\t\t\t\t\t\t\t\t\t\t}, 1000)\n\t\t\t\t\t\t\t\t\t}\n                                }\n                            };\n                            fileTransfer.download(\n                                encodeURI(fileUrl),\n                                fileEntry.nativeURL,\n                                async function (entry) {\n\t\t\t\t\t\t\t\t\tlogger.info(\"saveFileToLocal filename\", filename, 'fileUrl', fileUrl, 'folder', folder)\n\t\t\t\t\t\t\t\t\tif(!filename) return res()\n                                    if (progressPercent >= 1) {\n\t\t\t\t\t\t\t\t\t\tlogger.info(\"saveFileToLocal download complete wait for next to success filenameOrigin\", filenameOrigin)\n\t\t\t\t\t\t\t\t\t\twindow.eventEmit.$off(`FileTransfer-${filenameOrigin}`)\n\t\t\t\t\t\t\t\t\t\tif(needSaveToDownloadBox){\n\t\t\t\t\t\t\t\t\t\t\tconst { username } = $getState().login\n\t\t\t\t\t\t\t\t\t\t\tconst downloadingFileOrigin = `downloading_${filenameOrigin}`\n\t\t\t\t\t\t\t\t\t\t\tconst downloadedFileOrigin = `downloaded_${filenameOrigin}`\n\t\t\t\t\t\t\t\t\t\t\tconst downloadedDataToSaveIndexedDBObj = {\n\t\t\t\t\t\t\t\t\t\t\t\tfilename,\n\t\t\t\t\t\t\t\t\t\t\t\tusername,\n\t\t\t\t\t\t\t\t\t\t\t\tfileSize: fileSizeCopy,\n\t\t\t\t\t\t\t\t\t\t\t\tuploadUsername,\n\t\t\t\t\t\t\t\t\t\t\t\tdate: Date.now(),\n\t\t\t\t\t\t\t\t\t\t\t\tfilenameOrigin: downloadedFileOrigin,\n\t\t\t\t\t\t\t\t\t\t\t\tstatus: \"downloaded\"\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tlet addDataFromIndexDBPromise = Promise.resolve()\n\t\t\t\t\t\t\t\t\t\t\tif(fromMusic){\n\t\t\t\t\t\t\t\t\t\t\t\tdownloadedDataToSaveIndexedDBObj.isMusic = true\n\t\t\t\t\t\t\t\t\t\t\t\tdownloadedDataToSaveIndexedDBObj.filePath = `cdvfile://localhost/sdcard/miXingFeng/music/${downloadedFileOrigin}`\n\t\t\t\t\t\t\t\t\t\t\t\tdownloadedDataToSaveIndexedDBObj.fileUrl = fileUrl\n\t\t\t\t\t\t\t\t\t\t\t\tdownloadedDataToSaveIndexedDBObj.duration = options.duration\n\t\t\t\t\t\t\t\t\t\t\t\tdownloadedDataToSaveIndexedDBObj.id = options.fileId || \"downloaded\"\n\t\t\t\t\t\t\t\t\t\t\t\tdownloadedDataToSaveIndexedDBObj.original = options.original\n\t\t\t\t\t\t\t\t\t\t\t\tawait removeMusicDataByIndexFromIndexDB(downloadingFileOrigin)\n\t\t\t\t\t\t\t\t\t\t\t\t// await removeMusicDataByIndexFromIndexDB(downloadedFileOrigin)\n\t\t\t\t\t\t\t\t\t\t\t\taddDataFromIndexDBPromise = addMusicDataFromIndexDB(downloadedDataToSaveIndexedDBObj)\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\tawait removeDataByIndexFromIndexDB(downloadingFileOrigin)\n\t\t\t\t\t\t\t\t\t\t\t\t// await removeDataByIndexFromIndexDB(downloadedFileOrigin)\n\t\t\t\t\t\t\t\t\t\t\t\taddDataFromIndexDBPromise = addDataFromIndexDB(downloadedDataToSaveIndexedDBObj)\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\taddDataFromIndexDBPromise\n\t\t\t\t\t\t\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\talert(`${filename}下载完成`)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst { downloadingFileList, downloadingMusicItems, fileList, downloadedMusicList, downloadedFileList } = $getState().fileServer\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(fromMusic){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst downloadedMusicListCopy = JSON.parse(JSON.stringify(downloadedMusicList))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst downloadingMusicItemsCopy = JSON.parse(JSON.stringify(downloadingMusicItems))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdownloadedMusicListCopy.push(downloadedDataToSaveIndexedDBObj)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$dispatch(updateDownloadedMusicList(downloadedMusicListCopy))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor(let index in downloadingMusicItems){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(downloadingMusicItems[index].filenameOrigin === `downloading_${filenameOrigin}`){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdownloadingMusicItemsCopy.splice(index, 1)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlogger.info(\"downloadingMusicItems 下载完成\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$dispatch(updateDownloadingMusicItems(downloadingMusicItemsCopy))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst fileListCopy = JSON.parse(JSON.stringify(fileList))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst downloadedFileListCopy = JSON.parse(JSON.stringify(downloadedFileList))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst downloadingFileListCopy = JSON.parse(JSON.stringify(downloadingFileList))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfileListCopy.forEach((item) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(item.filenameOrigin === filenameOrigin){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\titem.downloaded = true\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$dispatch(updateFileList(fileListCopy));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdownloadedFileListCopy.push(downloadedDataToSaveIndexedDBObj)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$dispatch(updateDownloadedFileList(downloadedFileListCopy));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor(let index in downloadingFileList){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(downloadingFileList[index].filenameOrigin === `downloading_${filenameOrigin}`){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdownloadingFileListCopy.splice(index, 1)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlogger.info(\"downloadingFileList 下载完成\", downloadingFileListCopy)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$dispatch(updateDownloadingFileList(downloadingFileListCopy))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlogger.info(\"saveFileToLocal download complete success filenameOrigin\", filenameOrigin)\n\t\t\t\t\t\t\t\t\t\t\t\t\t}, 1010)\n\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\t.catch(err => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tlogger.error(\"download fail\", err)\n\t\t\t\t\t\t\t\t\t\t\t\t\talert(\"下载失败\")\n\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t}\n                                        res()\n                                    }\n                                },\n                                function (error) {\n\t\t\t\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\t\t\t\t// window.eventEmit.$off(`FileTransfer-${filenameOrigin}`)\n\t\t\t\t\t\t\t\t\t\tif(cancelDownload){\n\t\t\t\t\t\t\t\t\t\t\twindow.logger.info(`error callback cancel download`);\n\t\t\t\t\t\t\t\t\t\t\tlogger.info(\"saveFileToLocal download 已取消 filenameOrigin\", filenameOrigin)\n\t\t\t\t\t\t\t\t\t\t\tupdateDownloadingStatus(filename, '已取消', uploadUsername, fileSizeCopy, needSaveToDownloadBox, fileUrl, filenameOrigin, fromMusic, options)\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\twindow.logger.error(`下载失败`, error, 'fileUrl', fileUrl);\n\t\t\t\t\t\t\t\t\t\t\tif(error.body === \"Not Found\"){\n\t\t\t\t\t\t\t\t\t\t\t\twindow.logger.error(\"saveFileToLocal download 文件已删除 filenameOrigin\", filenameOrigin);\n\t\t\t\t\t\t\t\t\t\t\t\talert(\"文件已删除\")\n\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\talert(`${filename}下载失败`)\n\t\t\t\t\t\t\t\t\t\t\twindow.logger.error(\"saveFileToLocal download 下载失败 filenameOrigin\", filenameOrigin);\n\t\t\t\t\t\t\t\t\t\t\tupdateDownloadingStatus(filename, '失败', uploadUsername, fileSizeCopy, needSaveToDownloadBox, fileUrl, filenameOrigin, fromMusic, options)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}, 1010)\n                                    res()\n                                }\n\t\t\t\t\t\t\t);\n                        },\n                        function (error) {\n\t\t\t\t\t\t\twindow.logger.error(\"saveFileToLocal 获取文件失败\", error.stack||error.toString());\n                            res()\n                        }\n                \t);\n                },function (error) {\n\t\t\t\t\talert(\"文件系统加载失败！\")\n                    window.logger.error(`saveFileToLocal 文件系统加载失败！`, error);\n                })\n            });\n\t\t})\n    })\n}\n\nexport const updateDownloadingStatus = (filename, result, uploadUsername, fileSize, needSaveToDownloadBox, filePath, filenameOrigin, fromMusic, options) => {\n\tif(!needSaveToDownloadBox) return;\n\tconst { downloadingFileList, downloadingMusicItems } = $getState().fileServer\n\tfilenameOrigin = `downloading_${filenameOrigin}`\n\tconst obj = {\n\t\tfilename,\n\t\tprogress: result,\n\t\tuploadUsername,\n\t\tfilePath,\n\t\tfileSize,\n\t\tfilenameOrigin\n\t}\n\tif(fromMusic){\n\t\tobj.duration = options.duration\n\t\tconst downloadingMusicItemsCopy = JSON.parse(JSON.stringify(downloadingMusicItems))\n\t\tfor(let index in downloadingMusicItemsCopy){\n\t\t\tif(downloadingMusicItemsCopy[index].filenameOrigin === filenameOrigin){\n\t\t\t\tdownloadingMusicItemsCopy[index].progress = result;\n\t\t\t\t$dispatch(updateDownloadingMusicItems(downloadingMusicItemsCopy))\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t\tdownloadingMusicItemsCopy.push(obj)\n\t\t$dispatch(updateDownloadingMusicItems(downloadingMusicItemsCopy))\n\t} else {\n\t\tconst downloadingFileListCopy = JSON.parse(JSON.stringify(downloadingFileList))\n\t\tfor(let index in downloadingFileListCopy){\n\t\t\tif(downloadingFileListCopy[index].filenameOrigin === filenameOrigin){\n\t\t\t\tdownloadingFileListCopy[index].progress = result;\n\t\t\t\t$dispatch(updateDownloadingFileList(downloadingFileListCopy))\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t\tdownloadingFileListCopy.push(obj)\n\t\t$dispatch(updateDownloadingFileList(downloadingFileListCopy))\n\t}\n\tlogger.info(\"updateDownloadingStatus fromMusic, obj\", fromMusic, obj)\n}\n\nexport const throttle = (fn, t) => {\n\tlet throttleTimer = null;\n\treturn function(){\n\t\tlet context = this;\n\t\tif(throttleTimer) return;\n\t\tthrottleTimer = setTimeout(() => {\n\t\t\tclearTimeout(throttleTimer)\n\t\t\tfn.apply(context, arguments)\n\t\t\tthrottleTimer = null;\n\t\t}, t)\n\t}\n}\n\nexport const debounce = (fn ,t) => {\n\tlet debounceTimer = null, firstTimeRun = true\n\treturn function(){\n\t\tlet context = this;\n\t\tif(debounceTimer){\n\t\t\tclearTimeout(debounceTimer)\n\t\t\tdebounceTimer = setTimeout(() => {\n\t\t\t\tfn.apply(context, arguments)\n\t\t\t\tdebounceTimer = null\n\t\t\t}, t)\n\t\t} else {\n\t\t\tif(firstTimeRun){\n\t\t\t\tfirstTimeRun = false\n\t\t\t\tfn.apply(context, arguments)\n\t\t\t} else {\n\t\t\t\tdebounceTimer = setTimeout(() => {\n\t\t\t\t\tfn.apply(context, arguments)\n\t\t\t\t\tdebounceTimer = null;\n\t\t\t\t}, t)\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport const debounceOpt = (fn, t, obj={}) => {\n\tconst self = this\n\tif(obj.debounceTimer){\n\t\tclearTimeout(obj.debounceTimer)\n\t\tobj.debounceTimer = setTimeout(() => {\n\t\t\tfn.apply(self, arguments)\n\t\t\tobj.debounceTimer = null\n\t\t}, t)\n\t} else {\n\t\tif(obj.firstTimeRun){\n\t\t\tobj.firstTimeRun = false\n\t\t\tfn.apply(context, arguments)\n\t\t} else {\n\t\t\tobj.debounceTimer = setTimeout(() => {\n\t\t\t\tfn.apply(self, arguments)\n\t\t\t\tobj.debounceTimer = null;\n\t\t\t}, t)\n\t\t}\n\t}\n}\n\nexport const openBrowserLink = (link) => {\n\tif(window.isCordova){\n\t\tdocument.addEventListener(\"deviceready\", () => {\n\t\t\tcordova.InAppBrowser.open(link, '_system', 'location=no');\n\t\t}, false);\n\t} else {\n\t\twindow.open(link)\n\t}\n}\n\nexport const checkFileWritePriority = () => {\n\treturn new Promise(res => {\n\t\tif(window.isCordova){\n\t\t\twindow.permissions.checkPermission(permissions.WRITE_EXTERNAL_STORAGE, function (status) {\n\t\t\t\tif(status.hasPermission){\n\t\t\t\t\tres(true)\n\t\t\t\t} else {\n\t\t\t\t\tlogger.info(\"saveFileToLocal WRITE_EXTERNAL_STORAGE\", status);\n\t\t\t\t\tres(false)\n\t\t\t\t}\n\t\t\t})\n\t\t} else {\n\t\t\tres(true)\n\t\t}\n\t})\n}\n\nexport const requestFileWritePriority = () => {\n\treturn new Promise(res => {\n\t\tif(window.isCordova){\n\t\t\twindow.requestFileSystem(window.LocalFileSystem.PERSISTENT, 0, function (fs) {\n\t\t\t\tfs.root.getDirectory('miXingFeng', {\n\t\t\t\t\tcreate: true\n\t\t\t\t}, function (dirEntry) {\n\t\t\t\t\tdirEntry.getDirectory(\"tmp\",\n\t\t\t\t\t\t{create: true},\n\t\t\t\t\t\tfunction (subDirEntry) {\n\t\t\t\t\t\t\t//持久化数据保存\n\t\t\t\t\t\t\tsubDirEntry.getFile(\n\t\t\t\t\t\t\t\t\"tmp\",\n\t\t\t\t\t\t\t\t{create: true, exclusive: false},\n\t\t\t\t\t\t\t\tfunction (fileEntry) {\n\t\t\t\t\t\t\t\t\tconst allowReadAndWriteFile = localStorage.getItem(\"allowReadAndWriteFile\")\n\t\t\t\t\t\t\t\t\tif(!allowReadAndWriteFile){\n\t\t\t\t\t\t\t\t\t\tlocalStorage.setItem(\"allowReadAndWriteFile\", \"yes\")\n\t\t\t\t\t\t\t\t\t\twindow.logger = new Logger({\n\t\t\t\t\t\t\t\t\t\t\tfolder: \"miXingFeng\",\n\t\t\t\t\t\t\t\t\t\t\tcolumn: \"log\",\n\t\t\t\t\t\t\t\t\t\t\tfilename: \"miXingFeng.txt\"\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tres(fileEntry)\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tfunction (error) {\n\t\t\t\t\t\t\t\t\tlogger.error(\"requestFileWritePriority error\", error)\n\t\t\t\t\t\t\t\t\tres(error)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\t\t\t\t\t)\n\t\t\t\t})\n\t\t\t})\n\t\t} else {\n\t\t\tres(false)\n\t\t}\n\t})\n}\n\nexport const IsPC = () => {\n\tconst userAgentInfo = navigator.userAgent;\n\tconst Agents = [\"Android\", \"iPhone\",\n\t\t\"SymbianOS\", \"Windows Phone\",\n\t\t\"iPad\", \"iPod\"\n\t];\n\tlet flag = true;\n\tfor (let v = 0; v < Agents.length; v++) {\n\t\tif (userAgentInfo.indexOf(Agents[v]) > 0) {\n\t\t\tflag = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn flag;\n}\n\nexport const generateRandomUserId = () => \"ls\" + Math.random().toString(36).slice(2, 6)\n\nexport const replaceSocketLink = (data, logInfo=\"logInfo\") => {\n\treturn axios.post(HTTP_URL.replaceSocketLink, data)\n\t\t.then(response => {\n\t\t\tif (response.data.result.response === \"success\") {\n\t\t\t\tlogger.info('replaceSocketLink success', logInfo)\n\t\t\t\treconnectSocket()\n\t\t\t} else {\n\t\t\t\tlogger.warn(\"replaceSocketLink fail\", logInfo)\n\t\t\t}\n\t\t})\n\t\t.catch(err => {\n\t\t\tlogger.warn(\"replaceSocketLink err\", logInfo, err)\n\t\t})\n}\n\nexport const checkWeChatInstallOrNot = () => {\n\treturn new Promise(res => {\n\t\tWechat.isInstalled(function (installed) {\n\t\t\tres(true)\n\t\t}, function (reason) {\n\t\t\talertDialog(\"未安装微信\")\n\t\t\tres(false)\n\t\t\tlogger.warn('Wechat.isInstalled', \"Failed: \" + reason);\n\t\t});\n\t})\n}\n\nexport const shareLinkToWeChat = ({\n\ttitle=\"这是分享的标题\",\n\tdescription=\"这是分享的描述\",\n\tthumb=\"www/assets/imgs/logo.png\",\n\twebpageUrl=CONSTANT.appStaticDirectory,\n\tscene=Wechat.Scene.SESSION  //Wechat.Scene.TIMELINE\n}) => {\n\treturn checkWeChatInstallOrNot()\n\t\t.then(bool => {\n\t\t\tif(bool){\n\t\t\t\treturn new Promise(res => {\n\t\t\t\t\tWechat.share({\n\t\t\t\t\t\tmessage:{\n\t\t\t\t\t\t\ttitle,\n\t\t\t\t\t\t\tdescription,\n\t\t\t\t\t\t\tthumb,\n\t\t\t\t\t\t\tmedia: {\n\t\t\t\t\t\t\t\ttype: Wechat.Type.WEBPAGE,\n\t\t\t\t\t\t\t\twebpageUrl\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tscene\n\t\t\t\t\t}, function () {\n\t\t\t\t\t\tlogActivity({\n\t\t\t\t\t\t\tmsg: \"shareLinkToWeChat\",\n\t\t\t\t\t\t\tLinkTitle: title,\n\t\t\t\t\t\t\tscene\n\t\t\t\t\t\t})\n\t\t\t\t\t\tres(\"success\")\n\t\t\t\t\t}, function (reason) {\n\t\t\t\t\t\tres(\"fail\")\n\t\t\t\t\t\tlogger.error(\"shareLinkToWeChat\", \"Failed: \" + reason);\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\treturn bool\n\t\t\t}\n\t\t})\n}\n\nexport const shareVideoToWeChat = ({\n\ttitle=\"这是分享的标题\",\n\tdescription=\"这是分享的描述\",\n\tthumb=\"www/assets/imgs/logo.png\",\n\tvideoUrl=CONSTANT.appStaticDirectory\n}) => {\n\treturn checkWeChatInstallOrNot()\n\t\t.then(bool => {\n\t\t\tif(bool){\n\t\t\t\treturn new Promise(res => {\n\t\t\t\t\tWechat.share({\n\t\t\t\t\t\tmessage: {\n\t\t\t\t\t\t\ttitle,\n\t\t\t\t\t\t\tdescription,\n\t\t\t\t\t\t\tthumb,\n\t\t\t\t\t\t\tmedia: {\n\t\t\t\t\t\t\t\ttype: Wechat.Type.VIDEO,\n\t\t\t\t\t\t\t\tvideoUrl,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tscene: Wechat.Scene.SESSION\n\t\t\t\t\t}, function () {\n\t\t\t\t\t\tlogActivity({\n\t\t\t\t\t\t\tmsg: \"shareVideoToWeChat\",\n\t\t\t\t\t\t\tvideoTitle: title\n\t\t\t\t\t\t})\n\t\t\t\t\t\tres(\"success\")\n\t\t\t\t\t}, function (reason) {\n\t\t\t\t\t\tres(\"fail\")\n\t\t\t\t\t\tlogger.error(\"shareVideoToWeChat Failed: \" + reason);\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\treturn bool\n\t\t\t}\n\t\t})\n}\n\nexport const comeFromWeChat = () => {\n\treturn navigator.userAgent.toLowerCase().includes(\"micromessenger\")\n}\n"],"mappings":";;;;;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AADA;AAGA;AACA;AARA;AAUA;AACA;AAdA;AAiBA;AACA;AAlBA;AAoBA;AApCA;AACA;AAsCA;AACA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AAhBA;AACA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAgBA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAjCA;AACA;AAyCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAXA;AAFA;AAoBA;AACA;AADA;AAGA;AACA;AAxBA;AA2BA;AACA;AADA;AA3BA;AAVA;AACA;AA0CA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAKA;AACA;AACA;AACA;AACA;AAfA;AACA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AAVA;AANA;;;;;;;;;;;;;;;;;;;;;;;;;;ACxKA;AACA;AACA;AACA;AACA;AAUA;AAGA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AAEA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AADA;AAGA;AADA;AAGA;AACA;AACA;AACA;AAbA;AAeA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAhCA;AACA;AADA;AAAA;AAAA;AAAA;AAmCA;AACA;AACA;AADA;AAGA;AACA;AAxCA;AA2CA;AA3CA;AAhCA;AACA;AA8EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAHA;AAMA;AANA;AAQA;AAbA;AACA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3DA;AACA;AA6DA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAJA;AAMA;AADA;AAGA;AACA;AACA;AAvBA;AA0BA;AACA;AA3BA;AAhCA;AACA;AA8DA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AAFA;AAIA;AADA;AAGA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AADA;AAGA;AADA;AAGA;AADA;AAGA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AATA;AAWA;AACA;AACA;AA5BA;AA+BA;AACA;AAhCA;AA3BA;;;;;AChPA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AAFA;AAVA;AAJA;AACA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAPA;AAFA;AAFA;AACA;AAgBA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAPA;AASA;AACA;AACA;AAFA;AAdA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC8oCA;AACA;AAGA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAjBA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AANA;AADA;AAUA;AACA;AACA;AADA;AAGA;AACA;AACA;AANA;AADA;AAUA;AACA;AACA;AACA;AA7CA;AA+CA;AACA;AACA;AACA;;;AAvEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAnsCA;AACA;AACA;AACA;AAUA;AAUA;AACA;AACA;AASA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AALA;AAQA;AARA;AAUA;AAdA;AACA;AAgBA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AAxBA;AACA;AA2BA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAPA;AACA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAhCA;AAoCA;AACA;AAvCA;AAHA;AACA;AA8CA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAPA;AASA;AADA;AATA;AADA;AACA;AAeA;AACA;AACA;AACA;AAKA;AALA;AAQA;AACA;AATA;AAHA;AACA;AAgBA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AAVA;AAJA;AAkBA;AACA;AApBA;AACA;AAsBA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AARA;AAUA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AADA;AAGA;AACA;AACA;AACA;AAhBA;AAkBA;AAlBA;AAdA;AAmCA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAXA;AAcA;AACA;AAfA;AAiBA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AALA;AAOA;AACA;AARA;AADA;AADA;AACA;AAcA;AAEA;AACA;AAHA;AAMA;AACA;AAPA;AAvEA;AACA;AAiFA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAbA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAiBA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/BA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAiCA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAfA;AAkBA;AACA;AAnBA;AAFA;AADA;AACA;AA0BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AADA;AAGA;AADA;AAGA;AACA;AACA;AAfA;AACA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAnBA;AAqBA;AACA;AAvBA;AACA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AALA;AAOA;AACA;AARA;AAUA;AACA;AAjBA;AACA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AADA;AAGA;AACA;AAJA;AAMA;AACA;AACA;AAVA;AACA;AAYA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzFA;AAJA;AAgGA;AACA;AAlGA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAoGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AASA;AACA;AAXA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAbA;AAeA;AACA;AAjBA;AAmBA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AALA;AAOA;AAEA;AACA;AADA;AAGA;AADA;AAGA;AACA;AARA;AAWA;AAXA;AARA;AACA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAlBA;AACA;AAqBA;AACA;AACA;AACA;AADA;AAGA;AALA;AACA;AAOA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AAEA;AAFA;AAIA;AAZA;AAcA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;AAPA;AACA;AAYA;AACA;AAAA;AAEA;AACA;AACA;AAzCA;AADA;AACA;AA8CA;AACA;AACA;AADA;AAGA;AACA;AALA;AACA;AAOA;AACA;AACA;AADA;AAGA;AACA;AALA;AACA;AAOA;AACA;AACA;AADA;AAGA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AANA;AADA;AAUA;AACA;AAjBA;AACA;AAmBA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AADA;AAGA;AACA;AAJA;AAMA;AACA;AACA;AAVA;AACA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAHA;AAKA;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AA1CA;AA4CA;AACA;AA/CA;AAkDA;AACA;AAnDA;AAjCA;AAuFA;AACA;AAlGA;AACA;AAoGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAFA;AAaA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAtBA;AARA;AACA;AAiCA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AARA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AAlBA;AACA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AACA;AAyBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAXA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AA1BA;AA6BA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AA1BA;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AA7JA;AA+JA;AACA;AACA;AACA;AA/KA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAiLA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AA0EA;AACA;AACA;AADA;AADA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcA;AACA;AACA;AAjBA;AACA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AAXA;AAaA;AACA;AACA;AACA;AAHA;AAAA;AAMA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AARA;AACA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AAbA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAHA;AAAA;AAMA;AANA;AAQA;AACA;AATA;AAJA;AAgBA;AACA;AACA;AACA;AAtBA;AAwBA;AACA;AA1BA;AA4BA;AACA;AACA;AACA;AACA;AACA;AAEA;AAFA;AAKA;AACA;AADA;AAIA;AACA;AACA;AAZA;AAcA;AAEA;AAFA;AAKA;AACA;AACA;AA7DA;AA+DA;AACA;AA/EA;AACA;AAiFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AAbA;AAeA;AACA;AApBA;AADA;AACA;AAwBA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAGA;AACA;AAJA;AAMA;AACA;AAPA;AAJA;AAaA;AAbA;AAHA;AAiBA;AAjBA;AADA;AAmBA;AAnBA;AADA;AADA;AACA;AAwBA;AACA;AACA;AAGA;AAIA;AAJA;AAOA;AAPA;AAHA;AADA;AADA;AACA;AAmBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAgBA;AACA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AACA;AACA;AACA;AAxBA;AA0BA;AACA;AA9CA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAgDA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAdA;AAoBA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAdA;AAoBA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAdA;AAoBA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAKA;AA7EA;AACA;AA+EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AAnBA;AAqBA;AACA;AACA;AAxBA;AACA;AA0BA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AAFA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAVA;AAYA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AANA;AAQA;AACA;AAVA;AAYA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAPA;AASA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAHA;AAAA;AAMA;AANA;AAQA;AACA;AATA;AAHA;AAeA;AACA;AAlBA;AAoBA;AAhEA;AACA;AAkEA;AACA;AAAA;AAAA;AAGA;AAJA;AACA;AAQA;AAGA;AACA;AACA;AACA;AANA;AACA;AASA;AACA;AACA;AAFA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AARA;AAWA;AACA;AADA;AAGA;AACA;AANA;AASA;AACA;AACA;AAvBA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AATA;AAAA;AAAA;AAAA;AAcA;AAdA;AAiBA;AAEA;AAFA;AAKA;AACA;AANA;AAtBA;AACA;AA+BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AARA;AAUA;AACA;AACA;AAEA;AACA;AACA;AACA;AALA;AAQA;AARA;AAhBA;AACA;AA2BA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAHA;AAPA;AAgBA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAHA;AAQA;AACA;AACA;AA9BA;AAiCA;AACA;AAlCA;AAoCA;AAhDA;AAkDA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AADA;AACA;AAgBA;AAAA;AACA;AACA;AACA;AACA;AAGA;AAIA;AACA;AADA;AAIA;AACA;AACA;AADA;AAGA;AADA;AAGA;AACA;AAXA;AAJA;AAmBA;AAnBA;AAHA;AADA;AA6BA;AACA;AAjCA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAmCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AARA;AAUA;AAVA;AARA;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzCA;AACA;AA2CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AADA;AAFA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AARA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AARA;AACA;AAUA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAHA;AAAA;AAMA;AANA;AAQA;AARA;AAUA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AALA;AAOA;AACA;AATA;AAWA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAPA;AASA;AACA;AAXA;AAaA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AAFA;AAAA;AAKA;AALA;AAOA;AAPA;AAPA;AAiBA;AACA;AApBA;AAsBA;AAzEA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AA2EA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAbA;;;;;;;;ACpmEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AAFA;AAVA;AAJA;AACA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAPA;AAFA;AAFA;AACA;AAgBA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAPA;AASA;AACA;AACA;AAFA;AAdA;AADA;;;;;;;;ACrDA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AAFA;AAVA;AAJA;AACA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAPA;AAFA;AAFA;AACA;AAgBA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAPA;AASA;AACA;AACA;AAFA;AAdA;AADA;;;;;;;;ACrDA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AACA;AACA;AACA;AACA;AAtBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAFA;AACA;AAaA;AACA;AAEA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AARA;AACA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AAVA;AAYA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AACA;AA3BA;AACA;AA6BA;AACA;AACA;AAGA;AACA;AACA;AAFA;AAMA;AAEA;AAEA;AAFA;AACA;AAIA;AACA;AADA;AAGA;AACA;AACA;AAZA;AANA;AAHA;AADA;AADA;AACA;AA6BA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAPA;AASA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAjBA;AAFA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAsBA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAbA;AAeA;AACA;AAlBA;AAoBA;AAtBA;AAJA;AAHA;AADA;AAoCA;AApCA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAwCA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AATA;AAYA;AAZA;AAFA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAkBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AASA;AACA;AACA;AADA;AAGA;AACA;AALA;AAOA;AAvBA;AACA;AAyBA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AACA;AAoBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AANA;AAAA;AASA;AATA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;AA0BA;AAlCA;AAoCA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAIA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AAHA;AAKA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AA3BA;AA6BA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAzCA;AACA;AADA;AAAA;AAAA;AAAA;AA2CA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AAHA;AAKA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApCA;AAFA;AA0CA;AACA;AA3CA;AA6CA;AACA;AACA;AAtFA;AACA;AADA;AAAA;AAAA;AAAA;AAyFA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AA3GA;AA9CA;AA8JA;AACA;AA/JA;AAJA;AAuKA;AACA;AAxKA;AAHA;AADA;AAHA;AA/DA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAoPA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAFA;AAAA;AAAA;AAMA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApCA;AACA;AAsCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AAFA;AACA;AAYA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AAlBA;AAFA;AACA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AAlBA;AACA;AAoBA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AANA;AADA;AAUA;AACA;AAZA;AADA;AACA;AAgBA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAIA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAbA;AAgBA;AACA;AAjBA;AAJA;AAHA;AADA;AADA;AAkCA;AACA;AApCA;AADA;AACA;AAwCA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AACA;AAeA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AAPA;AAUA;AAVA;AADA;AACA;AAcA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AALA;AADA;AADA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAFA;AAJA;AASA;AAVA;AAYA;AACA;AACA;AACA;AAHA;AAKA;AAjBA;AAmBA;AACA;AApBA;AADA;AADA;AA0BA;AACA;AA7BA;AAPA;AACA;AAuCA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAFA;AAJA;AASA;AAVA;AAYA;AACA;AACA;AAFA;AAIA;AAhBA;AAkBA;AACA;AAnBA;AADA;AADA;AAyBA;AACA;AA5BA;AANA;AACA;AAqCA;AACA;AADA;;;;A","sourceRoot":""}